{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift supports the operators you may already know from languages like C,"},{"type":"text","text":" "},{"type":"text","text":"and improves several capabilities to eliminate common coding errors."},{"type":"text","text":" "},{"type":"text","text":"The assignment operator ("},{"type":"codeVoice","code":"="},{"type":"text","text":") doesn’t return a value,"},{"type":"text","text":" "},{"type":"text","text":"to prevent it from being mistakenly used when"},{"type":"text","text":" "},{"type":"text","text":"the equal to operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") is intended."},{"type":"text","text":" "},{"type":"text","text":"Arithmetic operators ("},{"type":"codeVoice","code":"+"},{"type":"text","text":", "},{"type":"codeVoice","code":"-"},{"type":"text","text":", "},{"type":"codeVoice","code":"*"},{"type":"text","text":", "},{"type":"codeVoice","code":"\/"},{"type":"text","text":", "},{"type":"codeVoice","code":"%"},{"type":"text","text":" and so forth)"},{"type":"text","text":" "},{"type":"text","text":"detect and disallow value overflow,"},{"type":"text","text":" "},{"type":"text","text":"to avoid unexpected results when working with numbers that become larger or smaller"},{"type":"text","text":" "},{"type":"text","text":"than the allowed value range of the type that stores them."},{"type":"text","text":" "},{"type":"text","text":"You can opt in to value overflow behavior"},{"type":"text","text":" "},{"type":"text","text":"by using Swift’s overflow operators,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also provides range operators that aren’t found in C,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a...b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for expressing a range of values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This chapter describes the common operators in Swift."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"type":"text","text":" covers Swift’s advanced operators,"},{"type":"text","text":" "},{"type":"text","text":"and describes how to define your own custom operators"},{"type":"text","text":" "},{"type":"text","text":"and implement the standard operators for your own custom types."}]},{"anchor":"Terminology","level":2,"type":"heading","text":"Terminology"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operators are unary, binary, or ternary:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Unary"}]},{"type":"text","text":" operators operate on a single target (such as "},{"type":"codeVoice","code":"-a"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Unary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix"}]},{"type":"text","text":" operators appear immediately before their target (such as "},{"type":"codeVoice","code":"!b"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and unary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"postfix"}]},{"type":"text","text":" operators appear immediately after their target (such as "},{"type":"codeVoice","code":"c!"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Binary"}]},{"type":"text","text":" operators operate on two targets (such as "},{"type":"codeVoice","code":"2 + 3"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"infix"}]},{"type":"text","text":" because they appear in between their two targets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Ternary"}]},{"type":"text","text":" operators operate on three targets."},{"type":"text","text":" "},{"type":"text","text":"Like C, Swift has only one ternary operator,"},{"type":"text","text":" "},{"type":"text","text":"the ternary conditional operator ("},{"type":"codeVoice","code":"a ? b : c"},{"type":"text","text":")."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values that operators affect are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operands"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In the expression "},{"type":"codeVoice","code":"1 + 2"},{"type":"text","text":", the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" symbol is an infix operator"},{"type":"text","text":" "},{"type":"text","text":"and its two operands are the values "},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"2"},{"type":"text","text":"."}]},{"anchor":"Assignment-Operator","level":2,"type":"heading","text":"Assignment Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"assignment operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a = b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"initializes or updates the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" with the value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let b = 10","var a = 5","a = b","\/\/ a is now equal to 10"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the right side of the assignment is a tuple with multiple values,"},{"type":"text","text":" "},{"type":"text","text":"its elements can be decomposed into multiple constants or variables at once:"}]},{"type":"codeListing","syntax":"swift","code":["let (x, y) = (1, 2)","\/\/ x is equal to 1, and y is equal to 2"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the assignment operator in C and Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"the assignment operator in Swift doesn’t itself return a value."},{"type":"text","text":" "},{"type":"text","text":"The following statement isn’t valid:"}]},{"type":"codeListing","syntax":"swift","code":["if x = y {","   \/\/ This isn't valid, because x = y doesn't return a value.","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This feature prevents the assignment operator ("},{"type":"codeVoice","code":"="},{"type":"text","text":") from being used by accident"},{"type":"text","text":" "},{"type":"text","text":"when the equal to operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") is actually intended."},{"type":"text","text":" "},{"type":"text","text":"By making "},{"type":"codeVoice","code":"if x = y"},{"type":"text","text":" invalid,"},{"type":"text","text":" "},{"type":"text","text":"Swift helps you to avoid these kinds of errors in your code."}]},{"anchor":"Arithmetic-Operators","level":2,"type":"heading","text":"Arithmetic Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift supports the four standard "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arithmetic operators"}]},{"type":"text","text":" for all number types:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Addition ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subtraction ("},{"type":"codeVoice","code":"-"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiplication ("},{"type":"codeVoice","code":"*"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Division ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":")"}]}]}]},{"type":"codeListing","syntax":"swift","code":["1 + 2       \/\/ equals 3","5 - 3       \/\/ equals 2","2 * 3       \/\/ equals 6","10.0 \/ 2.5  \/\/ equals 4.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the arithmetic operators in C and Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"the Swift arithmetic operators don’t allow values to overflow by default."},{"type":"text","text":" "},{"type":"text","text":"You can opt in to value overflow behavior by using Swift’s overflow operators"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"a &+ b"},{"type":"text","text":"). See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The addition operator is also supported for "},{"type":"codeVoice","code":"String"},{"type":"text","text":" concatenation:"}]},{"type":"codeListing","syntax":"swift","code":["\"hello, \" + \"world\"  \/\/ equals \"hello, world\""]},{"anchor":"Remainder-Operator","level":3,"type":"heading","text":"Remainder Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"remainder operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a % b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"works out how many multiples of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" will fit inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"and returns the value that’s left over"},{"type":"text","text":" "},{"type":"text","text":"(known as the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"remainder"}]},{"type":"text","text":")."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The remainder operator ("},{"type":"codeVoice","code":"%"},{"type":"text","text":") is also known as"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modulo operator"}]},{"type":"text","text":" in other languages."},{"type":"text","text":" "},{"type":"text","text":"However, its behavior in Swift for negative numbers means that,"},{"type":"text","text":" "},{"type":"text","text":"strictly speaking, it’s a remainder rather than a modulo operation."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the remainder operator works."},{"type":"text","text":" "},{"type":"text","text":"To calculate "},{"type":"codeVoice","code":"9 % 4"},{"type":"text","text":", you first work out how many "},{"type":"codeVoice","code":"4"},{"type":"text","text":"s will fit inside "},{"type":"codeVoice","code":"9"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"remainderInteger"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can fit two "},{"type":"codeVoice","code":"4"},{"type":"text","text":"s inside "},{"type":"codeVoice","code":"9"},{"type":"text","text":", and the remainder is "},{"type":"codeVoice","code":"1"},{"type":"text","text":" (shown in orange)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, this would be written as:"}]},{"type":"codeListing","syntax":"swift","code":["9 % 4    \/\/ equals 1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To determine the answer for "},{"type":"codeVoice","code":"a % b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"%"},{"type":"text","text":" operator calculates the following equation"},{"type":"text","text":" "},{"type":"text","text":"and returns "},{"type":"codeVoice","code":"remainder"},{"type":"text","text":" as its output:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"a"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"b"},{"type":"text","text":" x "},{"type":"codeVoice","code":"some multiplier"},{"type":"text","text":") + "},{"type":"codeVoice","code":"remainder"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"where "},{"type":"codeVoice","code":"some multiplier"},{"type":"text","text":" is the largest number of multiples of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" "},{"type":"text","text":"that will fit inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inserting "},{"type":"codeVoice","code":"9"},{"type":"text","text":" and "},{"type":"codeVoice","code":"4"},{"type":"text","text":" into this equation yields:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"9"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"4"},{"type":"text","text":" x "},{"type":"codeVoice","code":"2"},{"type":"text","text":") + "},{"type":"codeVoice","code":"1"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same method is applied when calculating the remainder for a negative value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["-9 % 4   \/\/ equals -1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inserting "},{"type":"codeVoice","code":"-9"},{"type":"text","text":" and "},{"type":"codeVoice","code":"4"},{"type":"text","text":" into the equation yields:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"-9"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"4"},{"type":"text","text":" x "},{"type":"codeVoice","code":"-2"},{"type":"text","text":") + "},{"type":"codeVoice","code":"-1"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving a remainder value of "},{"type":"codeVoice","code":"-1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sign of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" is ignored for negative values of "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means that "},{"type":"codeVoice","code":"a % b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a % -b"},{"type":"text","text":" always give the same answer."}]},{"anchor":"Unary-Minus-Operator","level":3,"type":"heading","text":"Unary Minus Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sign of a numeric value can be toggled using a prefixed "},{"type":"codeVoice","code":"-"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unary minus operator"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let three = 3","let minusThree = -three       \/\/ minusThree equals -3","let plusThree = -minusThree   \/\/ plusThree equals 3, or \"minus minus three\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The unary minus operator ("},{"type":"codeVoice","code":"-"},{"type":"text","text":") is prepended directly before the value it operates on,"},{"type":"text","text":" "},{"type":"text","text":"without any white space."}]},{"anchor":"Unary-Plus-Operator","level":3,"type":"heading","text":"Unary Plus Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unary plus operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") simply returns"},{"type":"text","text":" "},{"type":"text","text":"the value it operates on, without any change:"}]},{"type":"codeListing","syntax":"swift","code":["let minusSix = -6","let alsoMinusSix = +minusSix  \/\/ alsoMinusSix equals -6"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although the unary plus operator doesn’t actually do anything,"},{"type":"text","text":" "},{"type":"text","text":"you can use it to provide symmetry in your code for positive numbers"},{"type":"text","text":" "},{"type":"text","text":"when also using the unary minus operator for negative numbers."}]},{"anchor":"Compound-Assignment-Operators","level":2,"type":"heading","text":"Compound Assignment Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like C, Swift provides "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compound assignment operators"}]},{"type":"text","text":" that combine assignment ("},{"type":"codeVoice","code":"="},{"type":"text","text":") with another operation."},{"type":"text","text":" "},{"type":"text","text":"One example is the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"addition assignment operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["var a = 1","a += 2","\/\/ a is now equal to 3"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The expression "},{"type":"codeVoice","code":"a += 2"},{"type":"text","text":" is shorthand for "},{"type":"codeVoice","code":"a = a + 2"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Effectively, the addition and the assignment are combined into one operator"},{"type":"text","text":" "},{"type":"text","text":"that performs both tasks at the same time."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The compound assignment operators don’t return a value."},{"type":"text","text":" "},{"type":"text","text":"For example, you can’t write "},{"type":"codeVoice","code":"let b = a += 2"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For information about the operators provided by the Swift standard library,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},{"type":"text","text":"."}]},{"anchor":"Comparison-Operators","level":2,"type":"heading","text":"Comparison Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift supports the following comparison operators:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Equal to ("},{"type":"codeVoice","code":"a == b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not equal to ("},{"type":"codeVoice","code":"a != b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Greater than ("},{"type":"codeVoice","code":"a > b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Less than ("},{"type":"codeVoice","code":"a < b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Greater than or equal to ("},{"type":"codeVoice","code":"a >= b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Less than or equal to ("},{"type":"codeVoice","code":"a <= b"},{"type":"text","text":")"}]}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also provides two "},{"type":"emphasis","inlineContent":[{"type":"text","text":"identity operators"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"==="},{"type":"text","text":" and "},{"type":"codeVoice","code":"!=="},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"which you use to test whether two object references both refer to the same object instance."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Identity-Operators"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each of the comparison operators returns a "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" value to indicate whether or not the statement is true:"}]},{"type":"codeListing","syntax":"swift","code":["1 == 1   \/\/ true because 1 is equal to 1","2 != 1   \/\/ true because 2 isn't equal to 1","2 > 1    \/\/ true because 2 is greater than 1","1 < 2    \/\/ true because 1 is less than 2","1 >= 1   \/\/ true because 1 is greater than or equal to 1","2 <= 1   \/\/ false because 2 isn't less than or equal to 1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comparison operators are often used in conditional statements,"},{"type":"text","text":" "},{"type":"text","text":"such as the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement:"}]},{"type":"codeListing","syntax":"swift","code":["let name = \"world\"","if name == \"world\" {","   print(\"hello, world\")","} else {","   print(\"I'm sorry \\(name), but I don't recognize you\")","}","\/\/ Prints \"hello, world\", because name is indeed equal to \"world\"."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can compare"},{"type":"text","text":" "},{"type":"text","text":"two tuples if they have the same type and the same number of values."},{"type":"text","text":" "},{"type":"text","text":"Tuples are compared from left to right,"},{"type":"text","text":" "},{"type":"text","text":"one value at a time,"},{"type":"text","text":" "},{"type":"text","text":"until the comparison finds two values"},{"type":"text","text":" "},{"type":"text","text":"that aren’t equal."},{"type":"text","text":" "},{"type":"text","text":"Those two values are compared,"},{"type":"text","text":" "},{"type":"text","text":"and the result of that comparison"},{"type":"text","text":" "},{"type":"text","text":"determines the overall result of the tuple comparison."},{"type":"text","text":" "},{"type":"text","text":"If all the elements are equal,"},{"type":"text","text":" "},{"type":"text","text":"then the tuples themselves are equal."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["(1, \"zebra\") < (2, \"apple\")   \/\/ true because 1 is less than 2; \"zebra\" and \"apple\" aren't compared","(3, \"apple\") < (3, \"bird\")    \/\/ true because 3 is equal to 3, and \"apple\" is less than \"bird\"","(4, \"dog\") == (4, \"dog\")      \/\/ true because 4 is equal to 4, and \"dog\" is equal to \"dog\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"you can see the left-to-right comparison behavior on the first line."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"1"},{"type":"text","text":" is less than "},{"type":"codeVoice","code":"2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"(1, \"zebra\")"},{"type":"text","text":" is considered less than "},{"type":"codeVoice","code":"(2, \"apple\")"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"regardless of any other values in the tuples."},{"type":"text","text":" "},{"type":"text","text":"It doesn’t matter that "},{"type":"codeVoice","code":"\"zebra\""},{"type":"text","text":" isn’t less than "},{"type":"codeVoice","code":"\"apple\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because the comparison is already determined by the tuples’ first elements."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"when the tuples’ first elements are the same,"},{"type":"text","text":" "},{"type":"text","text":"their second elements "},{"type":"emphasis","inlineContent":[{"type":"text","text":"are"}]},{"type":"text","text":" compared —"},{"type":"text","text":" "},{"type":"text","text":"this is what happens on the second and third line."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuples can be compared with a given operator only if the operator"},{"type":"text","text":" "},{"type":"text","text":"can be applied to each value in the respective tuples. For example,"},{"type":"text","text":" "},{"type":"text","text":"as demonstrated in the code below, you can compare"},{"type":"text","text":" "},{"type":"text","text":"two tuples of type "},{"type":"codeVoice","code":"(String, Int)"},{"type":"text","text":" because"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values can be compared"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"<"},{"type":"text","text":" operator.  In contrast,"},{"type":"text","text":" "},{"type":"text","text":"two tuples of type "},{"type":"codeVoice","code":"(String, Bool)"},{"type":"text","text":" can’t be compared"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"<"},{"type":"text","text":" operator because the "},{"type":"codeVoice","code":"<"},{"type":"text","text":" operator can’t be applied to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" values."}]},{"type":"codeListing","syntax":"swift","code":["(\"blue\", -1) < (\"purple\", 1)        \/\/ OK, evaluates to true","(\"blue\", false) < (\"purple\", true)  \/\/ Error because < can't compare Boolean values"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift standard library includes tuple comparison operators"},{"type":"text","text":" "},{"type":"text","text":"for tuples with fewer than seven elements."},{"type":"text","text":" "},{"type":"text","text":"To compare tuples with seven or more elements,"},{"type":"text","text":" "},{"type":"text","text":"you must implement the comparison operators yourself."}]}],"type":"aside","name":"Note"},{"anchor":"Ternary-Conditional-Operator","level":2,"type":"heading","text":"Ternary Conditional Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"ternary conditional operator"}]},{"type":"text","text":" is a special operator with three parts,"},{"type":"text","text":" "},{"type":"text","text":"which takes the form "},{"type":"codeVoice","code":"question ? answer1 : answer2"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It’s a shortcut for evaluating one of two expressions"},{"type":"text","text":" "},{"type":"text","text":"based on whether "},{"type":"codeVoice","code":"question"},{"type":"text","text":" is true or false."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"question"},{"type":"text","text":" is true, it evaluates "},{"type":"codeVoice","code":"answer1"},{"type":"text","text":" and returns its value;"},{"type":"text","text":" "},{"type":"text","text":"otherwise, it evaluates "},{"type":"codeVoice","code":"answer2"},{"type":"text","text":" and returns its value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ternary conditional operator is shorthand for the code below:"}]},{"type":"codeListing","syntax":"swift","code":["if question {","   answer1","} else {","   answer2","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example, which calculates the height for a table row."},{"type":"text","text":" "},{"type":"text","text":"The row height should be 50 points taller than the content height"},{"type":"text","text":" "},{"type":"text","text":"if the row has a header, and 20 points taller if the row doesn’t have a header:"}]},{"type":"codeListing","syntax":"swift","code":["let contentHeight = 40","let hasHeader = true","let rowHeight = contentHeight + (hasHeader ? 50 : 20)","\/\/ rowHeight is equal to 90"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above is shorthand for the code below:"}]},{"type":"codeListing","syntax":"swift","code":["let contentHeight = 40","let hasHeader = true","let rowHeight: Int","if hasHeader {","   rowHeight = contentHeight + 50","} else {","   rowHeight = contentHeight + 20","}","\/\/ rowHeight is equal to 90"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first example’s use of the ternary conditional operator means that"},{"type":"text","text":" "},{"type":"codeVoice","code":"rowHeight"},{"type":"text","text":" can be set to the correct value on a single line of code,"},{"type":"text","text":" "},{"type":"text","text":"which is more concise than the code used in the second example."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ternary conditional operator provides"},{"type":"text","text":" "},{"type":"text","text":"an efficient shorthand for deciding which of two expressions to consider."},{"type":"text","text":" "},{"type":"text","text":"Use the ternary conditional operator with care, however."},{"type":"text","text":" "},{"type":"text","text":"Its conciseness can lead to hard-to-read code if overused."},{"type":"text","text":" "},{"type":"text","text":"Avoid combining multiple instances of the ternary conditional operator into one compound statement."}]},{"anchor":"Nil-Coalescing-Operator","level":2,"type":"heading","text":"Nil-Coalescing Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nil-coalescing operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a ?? b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"unwraps an optional "},{"type":"codeVoice","code":"a"},{"type":"text","text":" if it contains a value,"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value "},{"type":"codeVoice","code":"b"},{"type":"text","text":" if "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The expression "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is always of an optional type."},{"type":"text","text":" "},{"type":"text","text":"The expression "},{"type":"codeVoice","code":"b"},{"type":"text","text":" must match the type that’s stored inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The nil-coalescing operator is shorthand for the code below:"}]},{"type":"codeListing","syntax":"swift","code":["a != nil ? a! : b"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above uses the ternary conditional operator and forced unwrapping ("},{"type":"codeVoice","code":"a!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to access the value wrapped inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":" when "},{"type":"codeVoice","code":"a"},{"type":"text","text":" isn’t "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and to return "},{"type":"codeVoice","code":"b"},{"type":"text","text":" otherwise."},{"type":"text","text":" "},{"type":"text","text":"The nil-coalescing operator provides a more elegant way to encapsulate"},{"type":"text","text":" "},{"type":"text","text":"this conditional checking and unwrapping in a concise and readable form."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" isn’t evaluated."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"short-circuit evaluation"}]},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below uses the nil-coalescing operator to choose between"},{"type":"text","text":" "},{"type":"text","text":"a default color name and an optional user-defined color name:"}]},{"type":"codeListing","syntax":"swift","code":["let defaultColorName = \"red\"","var userDefinedColorName: String?   \/\/ defaults to nil","","var colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName is nil, so colorNameToUse is set to the default of \"red\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" variable is defined as an optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" is of an optional type,"},{"type":"text","text":" "},{"type":"text","text":"you can use the nil-coalescing operator to consider its value."},{"type":"text","text":" "},{"type":"text","text":"In the example above, the operator is used to determine"},{"type":"text","text":" "},{"type":"text","text":"an initial value for a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"colorNameToUse"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the expression "},{"type":"codeVoice","code":"userDefinedColorName ?? defaultColorName"},{"type":"text","text":" returns"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"defaultColorName"},{"type":"text","text":", or "},{"type":"codeVoice","code":"\"red\""},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you assign a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value to "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" "},{"type":"text","text":"and perform the nil-coalescing operator check again,"},{"type":"text","text":" "},{"type":"text","text":"the value wrapped inside "},{"type":"codeVoice","code":"userDefinedColorName"},{"type":"text","text":" is used instead of the default:"}]},{"type":"codeListing","syntax":"swift","code":["userDefinedColorName = \"green\"","colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName isn't nil, so colorNameToUse is set to \"green\""]},{"anchor":"Range-Operators","level":2,"type":"heading","text":"Range Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift includes several "},{"type":"emphasis","inlineContent":[{"type":"text","text":"range operators"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for expressing a range of values."}]},{"anchor":"Closed-Range-Operator","level":3,"type":"heading","text":"Closed Range Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"closed range operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a...b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"defines a range that runs from "},{"type":"codeVoice","code":"a"},{"type":"text","text":" to "},{"type":"codeVoice","code":"b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and includes the values "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" must not be greater than "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closed range operator is useful when iterating over a range"},{"type":"text","text":" "},{"type":"text","text":"in which you want all of the values to be used,"},{"type":"text","text":" "},{"type":"text","text":"such as with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop:"}]},{"type":"codeListing","syntax":"swift","code":["for index in 1...5 {","   print(\"\\(index) times 5 is \\(index * 5)\")","}","\/\/ 1 times 5 is 5","\/\/ 2 times 5 is 10","\/\/ 3 times 5 is 15","\/\/ 4 times 5 is 20","\/\/ 5 times 5 is 25"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loops, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"anchor":"Half-Open-Range-Operator","level":3,"type":"heading","text":"Half-Open Range Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"half-open range operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"defines a range that runs from "},{"type":"codeVoice","code":"a"},{"type":"text","text":" to "},{"type":"codeVoice","code":"b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"but doesn’t include "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It’s said to be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"half-open"}]},{"type":"text","text":" "},{"type":"text","text":"because it contains its first value, but not its final value."},{"type":"text","text":" "},{"type":"text","text":"As with the closed range operator,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" must not be greater than "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":"b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"then the resulting range will be empty."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Half-open ranges are particularly useful when you work with"},{"type":"text","text":" "},{"type":"text","text":"zero-based lists such as arrays,"},{"type":"text","text":" "},{"type":"text","text":"where it’s useful to count up to (but not including) the length of the list:"}]},{"type":"codeListing","syntax":"swift","code":["let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]","let count = names.count","for i in 0..<count {","   print(\"Person \\(i + 1) is called \\(names[i])\")","}","\/\/ Person 1 is called Anna","\/\/ Person 2 is called Alex","\/\/ Person 3 is called Brian","\/\/ Person 4 is called Jack"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the array contains four items,"},{"type":"text","text":" "},{"type":"text","text":"but "},{"type":"codeVoice","code":"0..<count"},{"type":"text","text":" only counts as far as "},{"type":"codeVoice","code":"3"},{"type":"text","text":" "},{"type":"text","text":"(the index of the last item in the array),"},{"type":"text","text":" "},{"type":"text","text":"because it’s a half-open range."},{"type":"text","text":" "},{"type":"text","text":"For more about arrays, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays"},{"type":"text","text":"."}]},{"anchor":"One-Sided-Ranges","level":3,"type":"heading","text":"One-Sided Ranges"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closed range operator"},{"type":"text","text":" "},{"type":"text","text":"has an alternative form for ranges that continue"},{"type":"text","text":" "},{"type":"text","text":"as far as possible in one direction —"},{"type":"text","text":" "},{"type":"text","text":"for example,"},{"type":"text","text":" "},{"type":"text","text":"a range that includes all the elements of an array"},{"type":"text","text":" "},{"type":"text","text":"from index 2 to the end of the array."},{"type":"text","text":" "},{"type":"text","text":"In these cases, you can omit the value"},{"type":"text","text":" "},{"type":"text","text":"from one side of the range operator."},{"type":"text","text":" "},{"type":"text","text":"This kind of range is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one-sided range"}]},{"type":"text","text":" "},{"type":"text","text":"because the operator has a value on only one side."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["for name in names[2...] {","    print(name)","}","\/\/ Brian","\/\/ Jack","","for name in names[...2] {","    print(name)","}","\/\/ Anna","\/\/ Alex","\/\/ Brian"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The half-open range operator also has"},{"type":"text","text":" "},{"type":"text","text":"a one-sided form that’s written"},{"type":"text","text":" "},{"type":"text","text":"with only its final value."},{"type":"text","text":" "},{"type":"text","text":"Just like when you include a value on both sides,"},{"type":"text","text":" "},{"type":"text","text":"the final value isn’t part of the range."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["for name in names[..<2] {","    print(name)","}","\/\/ Anna","\/\/ Alex"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One-sided ranges can be used in other contexts,"},{"type":"text","text":" "},{"type":"text","text":"not just in subscripts."},{"type":"text","text":" "},{"type":"text","text":"You can’t iterate over a one-sided range"},{"type":"text","text":" "},{"type":"text","text":"that omits a first value,"},{"type":"text","text":" "},{"type":"text","text":"because it isn’t clear where iteration should begin."},{"type":"text","text":" "},{"type":"text","text":"You "},{"type":"emphasis","inlineContent":[{"type":"text","text":"can"}]},{"type":"text","text":" iterate over a one-sided range that omits its final value;"},{"type":"text","text":" "},{"type":"text","text":"however, because the range continues indefinitely,"},{"type":"text","text":" "},{"type":"text","text":"make sure you add an explicit end condition for the loop."},{"type":"text","text":" "},{"type":"text","text":"You can also check whether a one-sided range contains a particular value,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the code below."}]},{"type":"codeListing","syntax":"swift","code":["let range = ...5","range.contains(7)   \/\/ false","range.contains(4)   \/\/ true","range.contains(-1)  \/\/ true"]},{"anchor":"Logical-Operators","level":2,"type":"heading","text":"Logical Operators"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Logical operators"}]},{"type":"text","text":" modify or combine"},{"type":"text","text":" "},{"type":"text","text":"the Boolean logic values "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift supports the three standard logical operators found in C-based languages:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Logical NOT ("},{"type":"codeVoice","code":"!a"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Logical AND ("},{"type":"codeVoice","code":"a && b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Logical OR ("},{"type":"codeVoice","code":"a || b"},{"type":"text","text":")"}]}]}]},{"anchor":"Logical-NOT-Operator","level":3,"type":"heading","text":"Logical NOT Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical NOT operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"!a"},{"type":"text","text":") inverts a Boolean value so that "},{"type":"codeVoice","code":"true"},{"type":"text","text":" becomes "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" becomes "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The logical NOT operator is a prefix operator,"},{"type":"text","text":" "},{"type":"text","text":"and appears immediately before the value it operates on,"},{"type":"text","text":" "},{"type":"text","text":"without any white space."},{"type":"text","text":" "},{"type":"text","text":"It can be read as “not "},{"type":"codeVoice","code":"a"},{"type":"text","text":"”, as seen in the following example:"}]},{"type":"codeListing","syntax":"swift","code":["let allowedEntry = false","if !allowedEntry {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"ACCESS DENIED\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The phrase "},{"type":"codeVoice","code":"if !allowedEntry"},{"type":"text","text":" can be read as “if not allowed entry.”"},{"type":"text","text":" "},{"type":"text","text":"The subsequent line is only executed if “not allowed entry” is true;"},{"type":"text","text":" "},{"type":"text","text":"that is, if "},{"type":"codeVoice","code":"allowedEntry"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As in this example,"},{"type":"text","text":" "},{"type":"text","text":"careful choice of Boolean constant and variable names"},{"type":"text","text":" "},{"type":"text","text":"can help to keep code readable and concise,"},{"type":"text","text":" "},{"type":"text","text":"while avoiding double negatives or confusing logic statements."}]},{"anchor":"Logical-AND-Operator","level":3,"type":"heading","text":"Logical AND Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical AND operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a && b"},{"type":"text","text":") creates logical expressions"},{"type":"text","text":" "},{"type":"text","text":"where both values must be "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for the overall expression to also be "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If either value is "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the overall expression will also be "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In fact, if the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"first"}]},{"type":"text","text":" value is "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the second value won’t even be evaluated,"},{"type":"text","text":" "},{"type":"text","text":"because it can’t possibly make the overall expression equate to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"short-circuit evaluation"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example considers two "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"and only allows access if both values are "},{"type":"codeVoice","code":"true"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let enteredDoorCode = true","let passedRetinaScan = false","if enteredDoorCode && passedRetinaScan {","   print(\"Welcome!\")","} else {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"ACCESS DENIED\""]},{"anchor":"Logical-OR-Operator","level":3,"type":"heading","text":"Logical OR Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical OR operator"}]},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a || b"},{"type":"text","text":") is an infix operator made from two adjacent pipe characters."},{"type":"text","text":" "},{"type":"text","text":"You use it to create logical expressions in which"},{"type":"text","text":" "},{"type":"text","text":"only "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one"}]},{"type":"text","text":" of the two values has to be "},{"type":"codeVoice","code":"true"},{"type":"text","text":" "},{"type":"text","text":"for the overall expression to be "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the Logical AND operator above,"},{"type":"text","text":" "},{"type":"text","text":"the Logical OR operator uses short-circuit evaluation to consider its expressions."},{"type":"text","text":" "},{"type":"text","text":"If the left side of a Logical OR expression is "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the right side isn’t evaluated,"},{"type":"text","text":" "},{"type":"text","text":"because it can’t change the outcome of the overall expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example below,"},{"type":"text","text":" "},{"type":"text","text":"the first "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" value ("},{"type":"codeVoice","code":"hasDoorKey"},{"type":"text","text":") is "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"but the second value ("},{"type":"codeVoice","code":"knowsOverridePassword"},{"type":"text","text":") is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because one value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the overall expression also evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and access is allowed:"}]},{"type":"codeListing","syntax":"swift","code":["let hasDoorKey = false","let knowsOverridePassword = true","if hasDoorKey || knowsOverridePassword {","   print(\"Welcome!\")","} else {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"anchor":"Combining-Logical-Operators","level":3,"type":"heading","text":"Combining Logical Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can combine multiple logical operators to create longer compound expressions:"}]},{"type":"codeListing","syntax":"swift","code":["if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword {","   print(\"Welcome!\")","} else {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses multiple "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" and "},{"type":"codeVoice","code":"||"},{"type":"text","text":" operators to create a longer compound expression."},{"type":"text","text":" "},{"type":"text","text":"However, the "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" and "},{"type":"codeVoice","code":"||"},{"type":"text","text":" operators still operate on only two values,"},{"type":"text","text":" "},{"type":"text","text":"so this is actually three smaller expressions chained together."},{"type":"text","text":" "},{"type":"text","text":"The example can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we’ve entered the correct door code and passed the retina scan,"},{"type":"text","text":" "},{"type":"text","text":"or if we have a valid door key,"},{"type":"text","text":" "},{"type":"text","text":"or if we know the emergency override password,"},{"type":"text","text":" "},{"type":"text","text":"then allow access."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Based on the values of "},{"type":"codeVoice","code":"enteredDoorCode"},{"type":"text","text":", "},{"type":"codeVoice","code":"passedRetinaScan"},{"type":"text","text":", and "},{"type":"codeVoice","code":"hasDoorKey"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the first two subexpressions are "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, the emergency override password is known,"},{"type":"text","text":" "},{"type":"text","text":"so the overall compound expression still evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift logical operators "},{"type":"codeVoice","code":"&&"},{"type":"text","text":" and "},{"type":"codeVoice","code":"||"},{"type":"text","text":" are left-associative,"},{"type":"text","text":" "},{"type":"text","text":"meaning that compound expressions with multiple logical operators"},{"type":"text","text":" "},{"type":"text","text":"evaluate the leftmost subexpression first."}]}],"type":"aside","name":"Note"},{"anchor":"Explicit-Parentheses","level":3,"type":"heading","text":"Explicit Parentheses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s sometimes useful to include parentheses when they’re not strictly needed,"},{"type":"text","text":" "},{"type":"text","text":"to make the intention of a complex expression easier to read."},{"type":"text","text":" "},{"type":"text","text":"In the door access example above,"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to add parentheses around the first part of the compound expression"},{"type":"text","text":" "},{"type":"text","text":"to make its intent explicit:"}]},{"type":"codeListing","syntax":"swift","code":["if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {","   print(\"Welcome!\")","} else {","   print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The parentheses make it clear that the first two values"},{"type":"text","text":" "},{"type":"text","text":"are considered as part of a separate possible state in the overall logic."},{"type":"text","text":" "},{"type":"text","text":"The output of the compound expression doesn’t change,"},{"type":"text","text":" "},{"type":"text","text":"but the overall intention is clearer to the reader."},{"type":"text","text":" "},{"type":"text","text":"Readability is always preferred over brevity;"},{"type":"text","text":" "},{"type":"text","text":"use parentheses where they help to make your intentions clear."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/basicoperators"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Basic Operators","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Structures and Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"type":"text","text":"for which you don’t have access to the original source code"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a programming language for iOS, macOS, watchOS, and tvOS app development."},{"type":"text","text":" "},{"type":"text","text":"If you have experience developing in C or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"many parts of Swift will be familiar to you."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Identity-Operators":{"abstract":[],"title":"Identity Operators","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Identity-Operators","url":"\/documentation\/the-swift-programming-language\/classesandstructures#Identity-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"type":"text","text":" "},{"type":"text","text":"Sets are unordered collections of unique values."},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"https://developer.apple.com/documentation/swift/operator_declarations":{"title":"Operator Declarations","titleInlineContent":[{"type":"text","text":"Operator Declarations"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},"remainderInteger":{"alt":null,"type":"image","identifier":"remainderInteger","variants":[{"url":"\/images\/remainderInteger@2x.png","traits":["2x","light"]},{"url":"\/images\/remainderInteger~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Basic Operators","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Overflow-Operators":{"abstract":[],"title":"Overflow Operators","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Overflow-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"type":"text","text":" "},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later,"},{"type":"text","text":" "},{"type":"text","text":"although only one piece of the program executes at a time."},{"type":"text","text":" "},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"type":"text","text":" "},{"type":"text","text":"while continuing to work on long-running operations"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"carries out multiple operations at a time;"},{"type":"text","text":" "},{"type":"text","text":"it suspends operations that are waiting for an external system,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift provides several advanced operators that perform more complex value manipulation."},{"type":"text","text":" "},{"type":"text","text":"These include all of the bitwise and bit shifting operators you will be familiar with"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays":{"abstract":[],"title":"Arrays","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Arrays"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"}}}