{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike other programming languages,"},{"type":"text","text":" "},{"type":"text","text":"Swift doesn’t require you to create separate interface and implementation files"},{"type":"text","text":" "},{"type":"text","text":"for custom structures and classes."},{"type":"text","text":" "},{"type":"text","text":"In Swift, you define a structure or class in a single file,"},{"type":"text","text":" "},{"type":"text","text":"and the external interface to that class or structure is"},{"type":"text","text":" "},{"type":"text","text":"automatically made available for other code to use."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of a class is traditionally known as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"object"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, Swift structures and classes"},{"type":"text","text":" "},{"type":"text","text":"are much closer in functionality than in other languages,"},{"type":"text","text":" "},{"type":"text","text":"and much of this chapter describes functionality that applies to"},{"type":"text","text":" "},{"type":"text","text":"instances of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"either"}]},{"type":"text","text":" a class or a structure type."},{"type":"text","text":" "},{"type":"text","text":"Because of this, the more general term "},{"type":"emphasis","inlineContent":[{"type":"text","text":"instance"}]},{"type":"text","text":" is used."}]}],"type":"aside","name":"Note"},{"anchor":"Comparing-Structures-and-Classes","level":2,"type":"heading","text":"Comparing Structures and Classes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes in Swift have many things in common."},{"type":"text","text":" "},{"type":"text","text":"Both can:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define properties to store values"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define methods to provide functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define subscripts to provide access to their values using subscript syntax"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define initializers to set up their initial state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Be extended to expand their functionality beyond a default implementation"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform to protocols to provide standard functionality of a certain kind"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes have additional capabilities that structures don’t have:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inheritance enables one class to inherit the characteristics of another."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casting enables you to check and interpret the type of a class instance at runtime."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deinitializers enable an instance of a class to free up any resources it has assigned."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference counting allows more than one reference to a class instance."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The additional capabilities that classes support"},{"type":"text","text":" "},{"type":"text","text":"come at the cost of increased complexity."},{"type":"text","text":" "},{"type":"text","text":"As a general guideline,"},{"type":"text","text":" "},{"type":"text","text":"prefer structures because they’re easier to reason about,"},{"type":"text","text":" "},{"type":"text","text":"and use classes when they’re appropriate or necessary."},{"type":"text","text":" "},{"type":"text","text":"In practice, this means most of the custom data types you define"},{"type":"text","text":" "},{"type":"text","text":"will be structures and enumerations."},{"type":"text","text":" "},{"type":"text","text":"For a more detailed comparison,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes and actors share many of the same characteristics and behaviors."},{"type":"text","text":" "},{"type":"text","text":"For information about actors, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Definition-Syntax","level":3,"type":"heading","text":"Definition Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes have a similar definition syntax."},{"type":"text","text":" "},{"type":"text","text":"You introduce structures with the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"and classes with the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Both place their entire definition within a pair of braces:"}]},{"type":"codeListing","syntax":"swift","code":["struct SomeStructure {","   \/\/ structure definition goes here","}","class SomeClass {","   \/\/ class definition goes here","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you define a new structure or class,"},{"type":"text","text":" "},{"type":"text","text":"you define a new Swift type."},{"type":"text","text":" "},{"type":"text","text":"Give types "},{"type":"codeVoice","code":"UpperCamelCase"},{"type":"text","text":" names"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"SomeStructure"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":" here)"},{"type":"text","text":" "},{"type":"text","text":"to match the capitalization of standard Swift types"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Give properties and methods "},{"type":"codeVoice","code":"lowerCamelCase"},{"type":"text","text":" names"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" and "},{"type":"codeVoice","code":"incrementCount"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to differentiate them from type names."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a structure definition and a class definition:"}]},{"type":"codeListing","syntax":"swift","code":["struct Resolution {","   var width = 0","   var height = 0","}","class VideoMode {","   var resolution = Resolution()","   var interlaced = false","   var frameRate = 0.0","   var name: String?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a new structure called "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to describe a pixel-based display resolution."},{"type":"text","text":" "},{"type":"text","text":"This structure has two stored properties called "},{"type":"codeVoice","code":"width"},{"type":"text","text":" and "},{"type":"codeVoice","code":"height"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are constants or variables that are bundled up and stored"},{"type":"text","text":" "},{"type":"text","text":"as part of the structure or class."},{"type":"text","text":" "},{"type":"text","text":"These two properties are inferred to be of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"type":"text","text":"by setting them to an initial integer value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above also defines a new class called "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to describe a specific video mode for video display."},{"type":"text","text":" "},{"type":"text","text":"This class has four variable stored properties."},{"type":"text","text":" "},{"type":"text","text":"The first, "},{"type":"codeVoice","code":"resolution"},{"type":"text","text":", is initialized with a new "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" structure instance,"},{"type":"text","text":" "},{"type":"text","text":"which infers a property type of "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For the other three properties,"},{"type":"text","text":" "},{"type":"text","text":"new "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instances will be initialized with"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"interlaced"},{"type":"text","text":" setting of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" (meaning “noninterlaced video”),"},{"type":"text","text":" "},{"type":"text","text":"a playback frame rate of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and an optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value called "},{"type":"codeVoice","code":"name"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property is automatically given a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “no "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value”, because it’s of an optional type."}]},{"anchor":"Structure-and-Class-Instances","level":3,"type":"heading","text":"Structure and Class Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" structure definition and the "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class definition"},{"type":"text","text":" "},{"type":"text","text":"only describe what a "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" or "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" will look like."},{"type":"text","text":" "},{"type":"text","text":"They themselves don’t describe a specific resolution or video mode."},{"type":"text","text":" "},{"type":"text","text":"To do that, you need to create an instance of the structure or class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax for creating instances is very similar for both structures and classes:"}]},{"type":"codeListing","syntax":"swift","code":["let someResolution = Resolution()","let someVideoMode = VideoMode()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes both use initializer syntax for new instances."},{"type":"text","text":" "},{"type":"text","text":"The simplest form of initializer syntax uses the type name of the class or structure"},{"type":"text","text":" "},{"type":"text","text":"followed by empty parentheses, such as "},{"type":"codeVoice","code":"Resolution()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"VideoMode()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This creates a new instance of the class or structure,"},{"type":"text","text":" "},{"type":"text","text":"with any properties initialized to their default values."},{"type":"text","text":" "},{"type":"text","text":"Class and structure initialization is described in more detail"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":"."}]},{"anchor":"Accessing-Properties","level":3,"type":"heading","text":"Accessing Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access the properties of an instance using "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dot syntax"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In dot syntax, you write the property name immediately after the instance name,"},{"type":"text","text":" "},{"type":"text","text":"separated by a period ("},{"type":"codeVoice","code":"."},{"type":"text","text":"), without any spaces:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The width of someResolution is \\(someResolution.width)\")","\/\/ Prints \"The width of someResolution is 0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"someResolution.width"},{"type":"text","text":" refers to the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"someResolution"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and returns its default initial value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can drill down into subproperties,"},{"type":"text","text":" "},{"type":"text","text":"such as the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property in the "},{"type":"codeVoice","code":"resolution"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is 0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use dot syntax to assign a new value to a variable property:"}]},{"type":"codeListing","syntax":"swift","code":["someVideoMode.resolution.width = 1280","print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is now 1280\""]},{"anchor":"Memberwise-Initializers-for-Structure-Types","level":3,"type":"heading","text":"Memberwise Initializers for Structure Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All structures have an automatically generated "},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise initializer"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which you can use to initialize the member properties of new structure instances."},{"type":"text","text":" "},{"type":"text","text":"Initial values for the properties of the new instance"},{"type":"text","text":" "},{"type":"text","text":"can be passed to the memberwise initializer by name:"}]},{"type":"codeListing","syntax":"swift","code":["let vga = Resolution(width: 640, height: 480)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike structures, class instances don’t receive a default memberwise initializer."},{"type":"text","text":" "},{"type":"text","text":"Initializers are described in more detail in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":"."}]},{"anchor":"Structures-and-Enumerations-Are-Value-Types","level":2,"type":"heading","text":"Structures and Enumerations Are Value Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value type"}]},{"type":"text","text":" is a type whose value is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copied"}]},{"type":"text","text":" "},{"type":"text","text":"when it’s assigned to a variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"or when it’s passed to a function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve actually been using value types extensively throughout the previous chapters."},{"type":"text","text":" "},{"type":"text","text":"In fact, all of the basic types in Swift —"},{"type":"text","text":" "},{"type":"text","text":"integers, floating-point numbers, Booleans, strings, arrays and dictionaries —"},{"type":"text","text":" "},{"type":"text","text":"are value types, and are implemented as structures behind the scenes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All structures and enumerations are value types in Swift."},{"type":"text","text":" "},{"type":"text","text":"This means that any structure and enumeration instances you create —"},{"type":"text","text":" "},{"type":"text","text":"and any value types they have as properties —"},{"type":"text","text":" "},{"type":"text","text":"are always copied when they’re passed around in your code."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Collections defined by the standard library"},{"type":"text","text":" "},{"type":"text","text":"like arrays, dictionaries, and strings"},{"type":"text","text":" "},{"type":"text","text":"use an optimization to reduce the performance cost of copying."},{"type":"text","text":" "},{"type":"text","text":"Instead of making a copy immediately,"},{"type":"text","text":" "},{"type":"text","text":"these collections share the memory where the elements are stored"},{"type":"text","text":" "},{"type":"text","text":"between the original instance and any copies."},{"type":"text","text":" "},{"type":"text","text":"If one of the copies of the collection is modified,"},{"type":"text","text":" "},{"type":"text","text":"the elements are copied just before the modification."},{"type":"text","text":" "},{"type":"text","text":"The behavior you see in your code"},{"type":"text","text":" "},{"type":"text","text":"is always as if a copy took place immediately."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider this example, which uses the "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" structure from the previous example:"}]},{"type":"codeListing","syntax":"swift","code":["let hd = Resolution(width: 1920, height: 1080)","var cinema = hd"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example declares a constant called "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" "},{"type":"text","text":"and sets it to a "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" instance initialized with"},{"type":"text","text":" "},{"type":"text","text":"the width and height of full HD video"},{"type":"text","text":" "},{"type":"text","text":"(1920 pixels wide by 1080 pixels high)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It then declares a variable called "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" "},{"type":"text","text":"and sets it to the current value of "},{"type":"codeVoice","code":"hd"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" is a structure,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copy"}]},{"type":"text","text":" of the existing instance is made,"},{"type":"text","text":" "},{"type":"text","text":"and this new copy is assigned to "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Even though "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" and "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" now have the same width and height,"},{"type":"text","text":" "},{"type":"text","text":"they’re two completely different instances behind the scenes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" is amended to be"},{"type":"text","text":" "},{"type":"text","text":"the width of the slightly wider 2K standard used for digital cinema projection"},{"type":"text","text":" "},{"type":"text","text":"(2048 pixels wide and 1080 pixels high):"}]},{"type":"codeListing","syntax":"swift","code":["cinema.width = 2048"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" "},{"type":"text","text":"shows that it has indeed changed to be "},{"type":"codeVoice","code":"2048"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["print(\"cinema is now \\(cinema.width) pixels wide\")","\/\/ Prints \"cinema is now 2048 pixels wide\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of the original "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"still has the old value of "},{"type":"codeVoice","code":"1920"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["print(\"hd is still \\(hd.width) pixels wide\")","\/\/ Prints \"hd is still 1920 pixels wide\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" was given the current value of "},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"values"}]},{"type":"text","text":" stored in "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" were copied into the new "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The end result was two completely separate instances"},{"type":"text","text":" "},{"type":"text","text":"that contained the same numeric values."},{"type":"text","text":" "},{"type":"text","text":"However, because they’re separate instances,"},{"type":"text","text":" "},{"type":"text","text":"setting the width of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" to "},{"type":"codeVoice","code":"2048"},{"type":"text","text":" "},{"type":"text","text":"doesn’t affect the width stored in "},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"sharedStateStruct"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same behavior applies to enumerations:"}]},{"type":"codeListing","syntax":"swift","code":["enum CompassPoint {","   case north, south, east, west","   mutating func turnNorth() {","      self = .north","   }","}","var currentDirection = CompassPoint.west","let rememberedDirection = currentDirection","currentDirection.turnNorth()","","print(\"The current direction is \\(currentDirection)\")","print(\"The remembered direction is \\(rememberedDirection)\")","\/\/ Prints \"The current direction is north\"","\/\/ Prints \"The remembered direction is west\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"rememberedDirection"},{"type":"text","text":" is assigned the value of "},{"type":"codeVoice","code":"currentDirection"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s actually set to a copy of that value."},{"type":"text","text":" "},{"type":"text","text":"Changing the value of "},{"type":"codeVoice","code":"currentDirection"},{"type":"text","text":" thereafter doesn’t affect"},{"type":"text","text":" "},{"type":"text","text":"the copy of the original value that was stored in "},{"type":"codeVoice","code":"rememberedDirection"},{"type":"text","text":"."}]},{"anchor":"Classes-Are-Reference-Types","level":2,"type":"heading","text":"Classes Are Reference Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike value types, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference types"}]},{"type":"text","text":" are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" copied"},{"type":"text","text":" "},{"type":"text","text":"when they’re assigned to a variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"or when they’re passed to a function."},{"type":"text","text":" "},{"type":"text","text":"Rather than a copy, a reference to the same existing instance is used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example, using the "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class defined above:"}]},{"type":"codeListing","syntax":"swift","code":["let tenEighty = VideoMode()","tenEighty.resolution = hd","tenEighty.interlaced = true","tenEighty.name = \"1080i\"","tenEighty.frameRate = 25.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example declares a new constant called "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" "},{"type":"text","text":"and sets it to refer to a new instance of the "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"The video mode is assigned a copy of the HD resolution of "},{"type":"codeVoice","code":"1920"},{"type":"text","text":" by "},{"type":"codeVoice","code":"1080"},{"type":"text","text":" from before."},{"type":"text","text":" "},{"type":"text","text":"It’s set to be interlaced,"},{"type":"text","text":" "},{"type":"text","text":"its name is set to "},{"type":"codeVoice","code":"\"1080i\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and its frame rate is set to "},{"type":"codeVoice","code":"25.0"},{"type":"text","text":" frames per second."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" is assigned to a new constant, called "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the frame rate of "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" is modified:"}]},{"type":"codeListing","syntax":"swift","code":["let alsoTenEighty = tenEighty","alsoTenEighty.frameRate = 30.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"type":"text","text":" "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" actually both refer to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"same"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"Effectively, they’re just two different names for the same single instance,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"sharedStateClass"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" "},{"type":"text","text":"shows that it correctly reports the new frame rate of "},{"type":"codeVoice","code":"30.0"},{"type":"text","text":" "},{"type":"text","text":"from the underlying "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")","\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also shows how reference types can be harder to reason about."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" were far apart in your program’s code,"},{"type":"text","text":" "},{"type":"text","text":"it could be difficult to find all the ways that the video mode is changed."},{"type":"text","text":" "},{"type":"text","text":"Wherever you use "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you also have to think about the code that uses "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and vice versa."},{"type":"text","text":" "},{"type":"text","text":"In contrast, value types are easier to reason about"},{"type":"text","text":" "},{"type":"text","text":"because all of the code that interacts with the same value"},{"type":"text","text":" "},{"type":"text","text":"is close together in your source files."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" are declared as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constants"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"rather than variables."},{"type":"text","text":" "},{"type":"text","text":"However, you can still change "},{"type":"codeVoice","code":"tenEighty.frameRate"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty.frameRate"},{"type":"text","text":" because"},{"type":"text","text":" "},{"type":"text","text":"the values of the "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" constants themselves don’t actually change."},{"type":"text","text":" "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" themselves don’t “store” the "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance —"},{"type":"text","text":" "},{"type":"text","text":"instead, they both "},{"type":"emphasis","inlineContent":[{"type":"text","text":"refer"}]},{"type":"text","text":" to a "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"It’s the "},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" property of the underlying "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" that’s changed,"},{"type":"text","text":" "},{"type":"text","text":"not the values of the constant references to that "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":"."}]},{"anchor":"Identity-Operators","level":3,"type":"heading","text":"Identity Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"type":"text","text":" "},{"type":"text","text":"it’s possible for multiple constants and variables to refer to"},{"type":"text","text":" "},{"type":"text","text":"the same single instance of a class behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"(The same isn’t true for structures and enumerations,"},{"type":"text","text":" "},{"type":"text","text":"because they’re always copied when they’re assigned to a constant or variable,"},{"type":"text","text":" "},{"type":"text","text":"or passed to a function.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can sometimes be useful to find out whether two constants or variables refer to"},{"type":"text","text":" "},{"type":"text","text":"exactly the same instance of a class."},{"type":"text","text":" "},{"type":"text","text":"To enable this, Swift provides two identity operators:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identical to ("},{"type":"codeVoice","code":"==="},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not identical to ("},{"type":"codeVoice","code":"!=="},{"type":"text","text":")"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use these operators to check whether two constants or variables refer to the same single instance:"}]},{"type":"codeListing","syntax":"swift","code":["if tenEighty === alsoTenEighty {","   print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")","}","\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"emphasis","inlineContent":[{"type":"text","text":"identical to"}]},{"type":"text","text":" (represented by three equals signs, or "},{"type":"codeVoice","code":"==="},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"doesn’t mean the same thing as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal to"}]},{"type":"text","text":" (represented by two equals signs, or "},{"type":"codeVoice","code":"=="},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Identical to"}]},{"type":"text","text":" means that"},{"type":"text","text":" "},{"type":"text","text":"two constants or variables of class type refer to exactly the same class instance."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Equal to"}]},{"type":"text","text":" means that"},{"type":"text","text":" "},{"type":"text","text":"two instances are considered equal or equivalent in value,"},{"type":"text","text":" "},{"type":"text","text":"for some appropriate meaning of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal"}]},{"type":"text","text":", as defined by the type’s designer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you define your own custom structures and classes,"},{"type":"text","text":" "},{"type":"text","text":"it’s your responsibility to decide what qualifies as two instances being equal."},{"type":"text","text":" "},{"type":"text","text":"The process of defining your own implementations of the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" and "},{"type":"codeVoice","code":"!="},{"type":"text","text":" operators"},{"type":"text","text":" "},{"type":"text","text":"is described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators"},{"type":"text","text":"."}]},{"anchor":"Pointers","level":3,"type":"heading","text":"Pointers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have experience with C, C++, or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"you may know that these languages use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pointers"}]},{"type":"text","text":" to refer to addresses in memory."},{"type":"text","text":" "},{"type":"text","text":"A Swift constant or variable that refers to an instance of some reference type"},{"type":"text","text":" "},{"type":"text","text":"is similar to a pointer in C,"},{"type":"text","text":" "},{"type":"text","text":"but isn’t a direct pointer to an address in memory,"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t require you to write an asterisk ("},{"type":"codeVoice","code":"*"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to indicate that you are creating a reference."},{"type":"text","text":" "},{"type":"text","text":"Instead, these references are defined like any other constant or variable in Swift."},{"type":"text","text":" "},{"type":"text","text":"The standard library provides pointer and buffer types"},{"type":"text","text":" "},{"type":"text","text":"that you can use if you need to interact with pointers directly —"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/classesandstructures"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Structures and Classes","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"sharedStateClass":{"alt":null,"type":"image","identifier":"sharedStateClass","variants":[{"url":"\/images\/sharedStateClass@2x.png","traits":["2x","light"]},{"url":"\/images\/sharedStateClass~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes":{"title":"Choosing Between Structures and Classes","titleInlineContent":[{"type":"text","text":"Choosing Between Structures and Classes"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators":{"abstract":[],"title":"Equivalence Operators","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"type":"text","text":" "},{"type":"text","text":"Sets are unordered collections of unique values."},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a programming language for iOS, macOS, watchOS, and tvOS app development."},{"type":"text","text":" "},{"type":"text","text":"If you have experience developing in C or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"many parts of Swift will be familiar to you."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management":{"title":"Manual Memory Management","titleInlineContent":[{"type":"text","text":"Manual Memory Management"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","url":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift provides several advanced operators that perform more complex value manipulation."},{"type":"text","text":" "},{"type":"text","text":"These include all of the bitwise and bit shifting operators you will be familiar with"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Basic Operators","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"type":"text","text":"for which you don’t have access to the original source code"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"type":"text","text":" "},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later,"},{"type":"text","text":" "},{"type":"text","text":"although only one piece of the program executes at a time."},{"type":"text","text":" "},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"type":"text","text":" "},{"type":"text","text":"while continuing to work on long-running operations"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"carries out multiple operations at a time;"},{"type":"text","text":" "},{"type":"text","text":"it suspends operations that are waiting for an external system,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"sharedStateStruct":{"alt":null,"type":"image","identifier":"sharedStateStruct","variants":[{"url":"\/images\/sharedStateStruct@2x.png","traits":["2x","light"]},{"url":"\/images\/sharedStateStruct~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"}}}