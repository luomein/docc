{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"CollectionTypes_intro"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays, sets, and dictionaries in Swift are always clear about"},{"type":"text","text":" "},{"type":"text","text":"the types of values and keys that they can store."},{"type":"text","text":" "},{"type":"text","text":"This means that you can’t insert a value of the wrong type"},{"type":"text","text":" "},{"type":"text","text":"into a collection by mistake."},{"type":"text","text":" "},{"type":"text","text":"It also means you can be confident about the type of values"},{"type":"text","text":" "},{"type":"text","text":"you will retrieve from a collection."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s array, set, and dictionary types are implemented as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic collections"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more about generic types and collections, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Mutability-of-Collections","level":2,"type":"heading","text":"Mutability of Collections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an array, a set, or a dictionary, and assign it to a variable,"},{"type":"text","text":" "},{"type":"text","text":"the collection that’s created will be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutable"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means that you can change (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutate"}]},{"type":"text","text":") the collection after it’s created"},{"type":"text","text":" "},{"type":"text","text":"by adding, removing, or changing items in the collection."},{"type":"text","text":" "},{"type":"text","text":"If you assign an array, a set, or a dictionary to a constant,"},{"type":"text","text":" "},{"type":"text","text":"that collection is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"immutable"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and its size and contents can’t be changed."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s good practice to create immutable collections"},{"type":"text","text":" "},{"type":"text","text":"in all cases where the collection doesn’t need to change."},{"type":"text","text":" "},{"type":"text","text":"Doing so makes it easier for you to reason about your code"},{"type":"text","text":" "},{"type":"text","text":"and enables the Swift compiler to optimize the performance of"},{"type":"text","text":" "},{"type":"text","text":"the collections you create."}]}],"type":"aside","name":"Note"},{"anchor":"Arrays","level":2,"type":"heading","text":"Arrays"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"array"}]},{"type":"text","text":" stores values of the same type in an ordered list."},{"type":"text","text":" "},{"type":"text","text":"The same value can appear in an array multiple times at different positions."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type is bridged to Foundation’s "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" class.For more information about using "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Array-Type-Shorthand-Syntax","level":3,"type":"heading","text":"Array Type Shorthand Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of a Swift array is written in full as "},{"type":"codeVoice","code":"Array<Element>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" is the type of values the array is allowed to store."},{"type":"text","text":" "},{"type":"text","text":"You can also write the type of an array in shorthand form as "},{"type":"codeVoice","code":"[Element]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Although the two forms are functionally identical,"},{"type":"text","text":" "},{"type":"text","text":"the shorthand form is preferred"},{"type":"text","text":" "},{"type":"text","text":"and is used throughout this guide when referring to the type of an array."}]},{"anchor":"Creating-an-Empty-Array","level":3,"type":"heading","text":"Creating an Empty Array"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create an empty array of a certain type"},{"type":"text","text":" "},{"type":"text","text":"using initializer syntax:"}]},{"type":"codeListing","syntax":"swift","code":["var someInts: [Int] = []","print(\"someInts is of type [Int] with \\(someInts.count) items.\")","\/\/ Prints \"someInts is of type [Int] with 0 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the type of the "},{"type":"codeVoice","code":"someInts"},{"type":"text","text":" variable is inferred to be "},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":" "},{"type":"text","text":"from the type of the initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, if the context already provides type information,"},{"type":"text","text":" "},{"type":"text","text":"such as a function argument or an already typed variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty array with an empty array literal,"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[]"},{"type":"text","text":" "},{"type":"text","text":"(an empty pair of square brackets):"}]},{"type":"codeListing","syntax":"swift","code":["someInts.append(3)","\/\/ someInts now contains 1 value of type Int","someInts = []","\/\/ someInts is now an empty array, but is still of type [Int]"]},{"anchor":"Creating-an-Array-with-a-Default-Value","level":3,"type":"heading","text":"Creating an Array with a Default Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type also provides"},{"type":"text","text":" "},{"type":"text","text":"an initializer for creating an array of a certain size"},{"type":"text","text":" "},{"type":"text","text":"with all of its values set to the same default value."},{"type":"text","text":" "},{"type":"text","text":"You pass this initializer"},{"type":"text","text":" "},{"type":"text","text":"a default value of the appropriate type (called "},{"type":"codeVoice","code":"repeating"},{"type":"text","text":"):"},{"type":"text","text":" "},{"type":"text","text":"and the number of times that value is repeated in the new array (called "},{"type":"codeVoice","code":"count"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["var threeDoubles = Array(repeating: 0.0, count: 3)","\/\/ threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]"]},{"anchor":"Creating-an-Array-by-Adding-Two-Arrays-Together","level":3,"type":"heading","text":"Creating an Array by Adding Two Arrays Together"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create a new array by adding together two existing arrays with compatible types"},{"type":"text","text":" "},{"type":"text","text":"with the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The new array’s type is inferred from the type of the two arrays you add together:"}]},{"type":"codeListing","syntax":"swift","code":["var anotherThreeDoubles = Array(repeating: 2.5, count: 3)","\/\/ anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]","","var sixDoubles = threeDoubles + anotherThreeDoubles","\/\/ sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]"]},{"anchor":"Creating-an-Array-with-an-Array-Literal","level":3,"type":"heading","text":"Creating an Array with an Array Literal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize an array with an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"array literal"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a shorthand way to write one or more values as an array collection."},{"type":"text","text":" "},{"type":"text","text":"An array literal is written as a list of values, separated by commas,"},{"type":"text","text":" "},{"type":"text","text":"surrounded by a pair of square brackets:"}]},{"type":"codeListing","syntax":"markdown","code":["[<#value 1#>, <#value 2#>, <#value 3#>]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below creates an array called "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}]},{"type":"codeListing","syntax":"swift","code":["var shoppingList: [String] = [\"Eggs\", \"Milk\"]","\/\/ shoppingList has been initialized with two initial items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" variable is declared as"},{"type":"text","text":" "},{"type":"text","text":"“an array of string values”, written as "},{"type":"codeVoice","code":"[String]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because this particular array has specified a value type of "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s allowed to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values only."},{"type":"text","text":" "},{"type":"text","text":"Here, the "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" array is initialized with two "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"\"Eggs\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"Milk\""},{"type":"text","text":"), written within an array literal."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" array is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer)"},{"type":"text","text":" "},{"type":"text","text":"and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer)"},{"type":"text","text":" "},{"type":"text","text":"because more items are added to the shopping list in the examples below."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, the array literal contains two "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values and nothing else."},{"type":"text","text":" "},{"type":"text","text":"This matches the type of the "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" variable’s declaration"},{"type":"text","text":" "},{"type":"text","text":"(an array that can only contain "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values),"},{"type":"text","text":" "},{"type":"text","text":"and so the assignment of the array literal is permitted"},{"type":"text","text":" "},{"type":"text","text":"as a way to initialize "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" with two initial items."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thanks to Swift’s type inference,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to write the type of the array"},{"type":"text","text":" "},{"type":"text","text":"if you’re initializing it with an array literal containing values of the same type."},{"type":"text","text":" "},{"type":"text","text":"The initialization of "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"type":"codeListing","syntax":"swift","code":["var shoppingList = [\"Eggs\", \"Milk\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because all values in the array literal are of the same type,"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer that "},{"type":"codeVoice","code":"[String]"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" variable."}]},{"anchor":"Accessing-and-Modifying-an-Array","level":3,"type":"heading","text":"Accessing and Modifying an Array"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify an array through its methods and properties,"},{"type":"text","text":" "},{"type":"text","text":"or by using subscript syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To find out the number of items in an array, check its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The shopping list contains \\(shoppingList.count) items.\")","\/\/ Prints \"The shopping list contains 2 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if shoppingList.isEmpty {","   print(\"The shopping list is empty.\")","} else {","   print(\"The shopping list isn't empty.\")","}","\/\/ Prints \"The shopping list isn't empty.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a new item to the end of an array by calling the array’s "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList.append(\"Flour\")","\/\/ shoppingList now contains 3 items, and someone is making pancakes"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, append an array of one or more compatible items"},{"type":"text","text":" "},{"type":"text","text":"with the addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList += [\"Baking Powder\"]","\/\/ shoppingList now contains 4 items","shoppingList += [\"Chocolate Spread\", \"Cheese\", \"Butter\"]","\/\/ shoppingList now contains 7 items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve a value from the array by using "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscript syntax"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"passing the index of the value you want to retrieve within square brackets"},{"type":"text","text":" "},{"type":"text","text":"immediately after the name of the array:"}]},{"type":"codeListing","syntax":"swift","code":["var firstItem = shoppingList[0]","\/\/ firstItem is equal to \"Eggs\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first item in the array has an index of "},{"type":"codeVoice","code":"0"},{"type":"text","text":", not "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Arrays in Swift are always zero-indexed."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to change an existing value at a given index:"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList[0] = \"Six eggs\"","\/\/ the first item in the list is now equal to \"Six eggs\" rather than \"Eggs\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you use subscript syntax,"},{"type":"text","text":" "},{"type":"text","text":"the index you specify needs to be valid."},{"type":"text","text":" "},{"type":"text","text":"For example, writing "},{"type":"codeVoice","code":"shoppingList[shoppingList.count] = \"Salt\""},{"type":"text","text":" "},{"type":"text","text":"to try to append an item to the end of the array"},{"type":"text","text":" "},{"type":"text","text":"results in a runtime error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use subscript syntax to change a range of values at once,"},{"type":"text","text":" "},{"type":"text","text":"even if the replacement set of values has a different length than the range you are replacing."},{"type":"text","text":" "},{"type":"text","text":"The following example replaces "},{"type":"codeVoice","code":"\"Chocolate Spread\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"Cheese\""},{"type":"text","text":", and "},{"type":"codeVoice","code":"\"Butter\""},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"\"Bananas\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"Apples\""},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList[4...6] = [\"Bananas\", \"Apples\"]","\/\/ shoppingList now contains 6 items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To insert an item into the array at a specified index,"},{"type":"text","text":" "},{"type":"text","text":"call the array’s "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["shoppingList.insert(\"Maple Syrup\", at: 0)","\/\/ shoppingList now contains 7 items","\/\/ \"Maple Syrup\" is now the first item in the list"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This call to the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method inserts a new item with a value of "},{"type":"codeVoice","code":"\"Maple Syrup\""},{"type":"text","text":" "},{"type":"text","text":"at the very beginning of the shopping list,"},{"type":"text","text":" "},{"type":"text","text":"indicated by an index of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, you remove an item from the array with the "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This method removes the item at the specified index and returns the removed item"},{"type":"text","text":" "},{"type":"text","text":"(although you can ignore the returned value if you don’t need it):"}]},{"type":"codeListing","syntax":"swift","code":["let mapleSyrup = shoppingList.remove(at: 0)","\/\/ the item that was at index 0 has just been removed","\/\/ shoppingList now contains 6 items, and no Maple Syrup","\/\/ the mapleSyrup constant is now equal to the removed \"Maple Syrup\" string"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to access or modify a value for an index"},{"type":"text","text":" "},{"type":"text","text":"that’s outside of an array’s existing bounds,"},{"type":"text","text":" "},{"type":"text","text":"you will trigger a runtime error."},{"type":"text","text":" "},{"type":"text","text":"You can check that an index is valid before using it"},{"type":"text","text":" "},{"type":"text","text":"by comparing it to the array’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The largest valid index in an array is "},{"type":"codeVoice","code":"count - 1"},{"type":"text","text":" "},{"type":"text","text":"because arrays are indexed from zero —"},{"type":"text","text":" "},{"type":"text","text":"however, when "},{"type":"codeVoice","code":"count"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" (meaning the array is empty),"},{"type":"text","text":" "},{"type":"text","text":"there are no valid indexes."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any gaps in an array are closed when an item is removed,"},{"type":"text","text":" "},{"type":"text","text":"and so the value at index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" is once again equal to "},{"type":"codeVoice","code":"\"Six eggs\""},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["firstItem = shoppingList[0]","\/\/ firstItem is now equal to \"Six eggs\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to remove the final item from an array,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"removeLast()"},{"type":"text","text":" method rather than the "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to avoid the need to query the array’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"Like the "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method, "},{"type":"codeVoice","code":"removeLast()"},{"type":"text","text":" returns the removed item:"}]},{"type":"codeListing","syntax":"swift","code":["let apples = shoppingList.removeLast()","\/\/ the last item in the array has just been removed","\/\/ shoppingList now contains 5 items, and no apples","\/\/ the apples constant is now equal to the removed \"Apples\" string"]},{"anchor":"Iterating-Over-an-Array","level":3,"type":"heading","text":"Iterating Over an Array"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the entire set of values in an array with the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop:"}]},{"type":"codeListing","syntax":"swift","code":["for item in shoppingList {","   print(item)","}","\/\/ Six eggs","\/\/ Milk","\/\/ Flour","\/\/ Baking Powder","\/\/ Bananas"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need the integer index of each item as well as its value,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" method to iterate over the array instead."},{"type":"text","text":" "},{"type":"text","text":"For each item in the array,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" method returns a tuple"},{"type":"text","text":" "},{"type":"text","text":"composed of an integer and the item."},{"type":"text","text":" "},{"type":"text","text":"The integers start at zero and count up by one for each item;"},{"type":"text","text":" "},{"type":"text","text":"if you enumerate over a whole array,"},{"type":"text","text":" "},{"type":"text","text":"these integers match the items’ indices."},{"type":"text","text":" "},{"type":"text","text":"You can decompose the tuple into temporary constants or variables"},{"type":"text","text":" "},{"type":"text","text":"as part of the iteration:"}]},{"type":"codeListing","syntax":"swift","code":["for (index, value) in shoppingList.enumerated() {","   print(\"Item \\(index + 1): \\(value)\")","}","\/\/ Item 1: Six eggs","\/\/ Item 2: Milk","\/\/ Item 3: Flour","\/\/ Item 4: Baking Powder","\/\/ Item 5: Bananas"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"anchor":"Sets","level":2,"type":"heading","text":"Sets"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"set"}]},{"type":"text","text":" stores distinct values of the same type"},{"type":"text","text":" "},{"type":"text","text":"in a collection with no defined ordering."},{"type":"text","text":" "},{"type":"text","text":"You can use a set instead of an array when the order of items isn’t important,"},{"type":"text","text":" "},{"type":"text","text":"or when you need to ensure that an item only appears once."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type is bridged to Foundation’s "},{"type":"codeVoice","code":"NSSet"},{"type":"text","text":" class.For more information about using "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Hash-Values-for-Set-Types","level":3,"type":"heading","text":"Hash Values for Set Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A type must be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"hashable"}]},{"type":"text","text":" in order to be stored in a set —"},{"type":"text","text":" "},{"type":"text","text":"that is, the type must provide a way to compute a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"hash value"}]},{"type":"text","text":" for itself."},{"type":"text","text":" "},{"type":"text","text":"A hash value is an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value that’s the same for all objects that compare equally,"},{"type":"text","text":" "},{"type":"text","text":"such that if "},{"type":"codeVoice","code":"a == b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the hash value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is equal to the hash value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of Swift’s basic types (such as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are hashable by default, and can be used as set value types or dictionary key types."},{"type":"text","text":" "},{"type":"text","text":"Enumeration case values without associated values"},{"type":"text","text":" "},{"type":"text","text":"(as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are also hashable by default."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use your own custom types as set value types or dictionary key types"},{"type":"text","text":" "},{"type":"text","text":"by making them conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the Swift standard library."},{"type":"text","text":" "},{"type":"text","text":"For information about implementing the required "},{"type":"codeVoice","code":"hash(into:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For information about conforming to protocols, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Set-Type-Syntax","level":3,"type":"heading","text":"Set Type Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of a Swift set is written as "},{"type":"codeVoice","code":"Set<Element>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" is the type that the set is allowed to store."},{"type":"text","text":" "},{"type":"text","text":"Unlike arrays, sets don’t have an equivalent shorthand form."}]},{"anchor":"Creating-and-Initializing-an-Empty-Set","level":3,"type":"heading","text":"Creating and Initializing an Empty Set"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create an empty set of a certain type"},{"type":"text","text":" "},{"type":"text","text":"using initializer syntax:"}]},{"type":"codeListing","syntax":"swift","code":["var letters = Set<Character>()","print(\"letters is of type Set<Character> with \\(letters.count) items.\")","\/\/ Prints \"letters is of type Set<Character> with 0 items.\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"letters"},{"type":"text","text":" variable is inferred to be "},{"type":"codeVoice","code":"Set<Character>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"from the type of the initializer."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, if the context already provides type information,"},{"type":"text","text":" "},{"type":"text","text":"such as a function argument or an already typed variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty set with an empty array literal:"}]},{"type":"codeListing","syntax":"swift","code":["letters.insert(\"a\")","\/\/ letters now contains 1 value of type Character","letters = []","\/\/ letters is now an empty set, but is still of type Set<Character>"]},{"anchor":"Creating-a-Set-with-an-Array-Literal","level":3,"type":"heading","text":"Creating a Set with an Array Literal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a set with an array literal,"},{"type":"text","text":" "},{"type":"text","text":"as a shorthand way to write one or more values as a set collection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below creates a set called "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}]},{"type":"codeListing","syntax":"swift","code":["var favoriteGenres: Set<String> = [\"Rock\", \"Classical\", \"Hip hop\"]","\/\/ favoriteGenres has been initialized with three initial items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" variable is declared as"},{"type":"text","text":" "},{"type":"text","text":"“a set of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values”, written as "},{"type":"codeVoice","code":"Set<String>"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because this particular set has specified a value type of "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" allowed to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Here, the "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" set is initialized with three "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"\"Rock\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"Classical\""},{"type":"text","text":", and "},{"type":"codeVoice","code":"\"Hip hop\""},{"type":"text","text":"), written within an array literal."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" set is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer)"},{"type":"text","text":" "},{"type":"text","text":"and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer)"},{"type":"text","text":" "},{"type":"text","text":"because items are added and removed in the examples below."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A set type can’t be inferred from an array literal alone,"},{"type":"text","text":" "},{"type":"text","text":"so the type "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" must be explicitly declared."},{"type":"text","text":" "},{"type":"text","text":"However, because of Swift’s type inference,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to write the type of the set’s elements"},{"type":"text","text":" "},{"type":"text","text":"if you’re initializing it with an array literal"},{"type":"text","text":" "},{"type":"text","text":"that contains values of just one type."},{"type":"text","text":" "},{"type":"text","text":"The initialization of "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"type":"codeListing","syntax":"swift","code":["var favoriteGenres: Set = [\"Rock\", \"Classical\", \"Hip hop\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because all values in the array literal are of the same type,"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer that "},{"type":"codeVoice","code":"Set<String>"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" variable."}]},{"anchor":"Accessing-and-Modifying-a-Set","level":3,"type":"heading","text":"Accessing and Modifying a Set"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a set through its methods and properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To find out the number of items in a set,"},{"type":"text","text":" "},{"type":"text","text":"check its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"I have \\(favoriteGenres.count) favorite music genres.\")","\/\/ Prints \"I have 3 favorite music genres.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if favoriteGenres.isEmpty {","   print(\"As far as music goes, I'm not picky.\")","} else {","   print(\"I have particular music preferences.\")","}","\/\/ Prints \"I have particular music preferences.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a new item into a set by calling the set’s "},{"type":"codeVoice","code":"insert(_:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["favoriteGenres.insert(\"[Tool J]\")","\/\/ favoriteGenres now contains 4 items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can remove an item from a set by calling the set’s "},{"type":"codeVoice","code":"remove(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which removes the item if it’s a member of the set,"},{"type":"text","text":" "},{"type":"text","text":"and returns the removed value,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the set didn’t contain it."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, all items in a set can be removed with its "},{"type":"codeVoice","code":"removeAll()"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["if let removedGenre = favoriteGenres.remove(\"Rock\") {","   print(\"\\(removedGenre)? I'm over it.\")","} else {","   print(\"I never much cared for that.\")","}","\/\/ Prints \"Rock? I'm over it.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check whether a set contains a particular item, use the "},{"type":"codeVoice","code":"contains(_:)"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["if favoriteGenres.contains(\"Funk\") {","    print(\"I get up on the good foot.\")","} else {","    print(\"It's too funky in here.\")","}","\/\/ Prints \"It's too funky in here.\""]},{"anchor":"Iterating-Over-a-Set","level":3,"type":"heading","text":"Iterating Over a Set"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the values in a set with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."}]},{"type":"codeListing","syntax":"swift","code":["for genre in favoriteGenres {","   print(\"\\(genre)\")","}","\/\/ Classical","\/\/ [Tool J]","\/\/ Hip hop"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type doesn’t have a defined ordering."},{"type":"text","text":" "},{"type":"text","text":"To iterate over the values of a set in a specific order,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"sorted()"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which returns the set’s elements as an array"},{"type":"text","text":" "},{"type":"text","text":"sorted using the "},{"type":"codeVoice","code":"<"},{"type":"text","text":" operator."}]},{"type":"codeListing","syntax":"swift","code":["for genre in favoriteGenres.sorted() {","   print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Hip hop","\/\/ [Tool J]"]},{"anchor":"Performing-Set-Operations","level":2,"type":"heading","text":"Performing Set Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can efficiently perform fundamental set operations,"},{"type":"text","text":" "},{"type":"text","text":"such as combining two sets together,"},{"type":"text","text":" "},{"type":"text","text":"determining which values two sets have in common,"},{"type":"text","text":" "},{"type":"text","text":"or determining whether two sets contain all, some, or none of the same values."}]},{"anchor":"Fundamental-Set-Operations","level":3,"type":"heading","text":"Fundamental Set Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below depicts two sets—"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":"—"},{"type":"text","text":" "},{"type":"text","text":"with the results of various set operations represented by the shaded regions."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"setVennDiagram"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"intersection(_:)"},{"type":"text","text":" method to create a new set with only the values common to both sets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"symmetricDifference(_:)"},{"type":"text","text":" method to create a new set with values in either set, but not both."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"union(_:)"},{"type":"text","text":" method to create a new set with all of the values in both sets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"subtracting(_:)"},{"type":"text","text":" method to create a new set with values not in the specified set."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let oddDigits: Set = [1, 3, 5, 7, 9]","let evenDigits: Set = [0, 2, 4, 6, 8]","let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]","","oddDigits.union(evenDigits).sorted()","\/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","oddDigits.intersection(evenDigits).sorted()","\/\/ []","oddDigits.subtracting(singleDigitPrimeNumbers).sorted()","\/\/ [1, 9]","oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()","\/\/ [1, 2, 9]"]},{"anchor":"Set-Membership-and-Equality","level":3,"type":"heading","text":"Set Membership and Equality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below depicts three sets—"},{"type":"codeVoice","code":"a"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"c"},{"type":"text","text":"—"},{"type":"text","text":" "},{"type":"text","text":"with overlapping regions representing elements shared among sets."},{"type":"text","text":" "},{"type":"text","text":"Set "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superset"}]},{"type":"text","text":" of set "},{"type":"codeVoice","code":"b"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"a"},{"type":"text","text":" contains all elements in "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Conversely, set "},{"type":"codeVoice","code":"b"},{"type":"text","text":" is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subset"}]},{"type":"text","text":" of set "},{"type":"codeVoice","code":"a"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because all elements in "},{"type":"codeVoice","code":"b"},{"type":"text","text":" are also contained by "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Set "},{"type":"codeVoice","code":"b"},{"type":"text","text":" and set "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"disjoint"}]},{"type":"text","text":" with one another,"},{"type":"text","text":" "},{"type":"text","text":"because they share no elements in common."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"setEulerDiagram"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the “is equal” operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") to determine whether two sets contain all of the same values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isSubset(of:)"},{"type":"text","text":" method to determine whether all of the values of a set are contained in the specified set."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isSuperset(of:)"},{"type":"text","text":" method to determine whether a set contains all of the values in a specified set."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isStrictSubset(of:)"},{"type":"text","text":" or "},{"type":"codeVoice","code":"isStrictSuperset(of:)"},{"type":"text","text":" methods to determine whether a set is a subset or superset, but not equal to, a specified set."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isDisjoint(with:)"},{"type":"text","text":" method to determine whether two sets have no values in common."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let houseAnimals: Set = [\"🐶\", \"🐱\"]","let farmAnimals: Set = [\"🐮\", \"🐔\", \"🐑\", \"🐶\", \"🐱\"]","let cityAnimals: Set = [\"🐦\", \"🐭\"]","","houseAnimals.isSubset(of: farmAnimals)","\/\/ true","farmAnimals.isSuperset(of: houseAnimals)","\/\/ true","farmAnimals.isDisjoint(with: cityAnimals)","\/\/ true"]},{"anchor":"Dictionaries","level":2,"type":"heading","text":"Dictionaries"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dictionary"}]},{"type":"text","text":" stores associations between"},{"type":"text","text":" "},{"type":"text","text":"keys of the same type and values of the same type"},{"type":"text","text":" "},{"type":"text","text":"in a collection with no defined ordering."},{"type":"text","text":" "},{"type":"text","text":"Each value is associated with a unique "},{"type":"emphasis","inlineContent":[{"type":"text","text":"key"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which acts as an identifier for that value within the dictionary."},{"type":"text","text":" "},{"type":"text","text":"Unlike items in an array, items in a dictionary don’t have a specified order."},{"type":"text","text":" "},{"type":"text","text":"You use a dictionary when you need to look up values based on their identifier,"},{"type":"text","text":" "},{"type":"text","text":"in much the same way that a real-world dictionary is used to look up"},{"type":"text","text":" "},{"type":"text","text":"the definition for a particular word."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type is bridged to Foundation’s "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" class.For more information about using "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Dictionary-Type-Shorthand-Syntax","level":3,"type":"heading","text":"Dictionary Type Shorthand Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of a Swift dictionary is written in full as "},{"type":"codeVoice","code":"Dictionary<Key, Value>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" is the type of value that can be used as a dictionary key,"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is the type of value that the dictionary stores for those keys."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A dictionary "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" type must conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"like a set’s value type."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also write the type of a dictionary in shorthand form as "},{"type":"codeVoice","code":"[Key: Value]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Although the two forms are functionally identical,"},{"type":"text","text":" "},{"type":"text","text":"the shorthand form is preferred"},{"type":"text","text":" "},{"type":"text","text":"and is used throughout this guide when referring to the type of a dictionary."}]},{"anchor":"Creating-an-Empty-Dictionary","level":3,"type":"heading","text":"Creating an Empty Dictionary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with arrays,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" of a certain type by using initializer syntax:"}]},{"type":"codeListing","syntax":"swift","code":["var namesOfIntegers: [Int: String] = [:]","\/\/ namesOfIntegers is an empty [Int: String] dictionary"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example creates an empty dictionary of type "},{"type":"codeVoice","code":"[Int: String]"},{"type":"text","text":" "},{"type":"text","text":"to store human-readable names of integer values."},{"type":"text","text":" "},{"type":"text","text":"Its keys are of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and its values are of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the context already provides type information,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty dictionary with an empty dictionary literal,"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[:]"},{"type":"text","text":" "},{"type":"text","text":"(a colon inside a pair of square brackets):"}]},{"type":"codeListing","syntax":"swift","code":["namesOfIntegers[16] = \"sixteen\"","\/\/ namesOfIntegers now contains 1 key-value pair","namesOfIntegers = [:]","\/\/ namesOfIntegers is once again an empty dictionary of type [Int: String]"]},{"anchor":"Creating-a-Dictionary-with-a-Dictionary-Literal","level":3,"type":"heading","text":"Creating a Dictionary with a Dictionary Literal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a dictionary with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dictionary literal"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has a similar syntax to the array literal seen earlier."},{"type":"text","text":" "},{"type":"text","text":"A dictionary literal is a shorthand way to write"},{"type":"text","text":" "},{"type":"text","text":"one or more key-value pairs as a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" collection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"key-value pair"}]},{"type":"text","text":" is a combination of a key and a value."},{"type":"text","text":" "},{"type":"text","text":"In a dictionary literal,"},{"type":"text","text":" "},{"type":"text","text":"the key and value in each key-value pair are separated by a colon."},{"type":"text","text":" "},{"type":"text","text":"The key-value pairs are written as a list, separated by commas,"},{"type":"text","text":" "},{"type":"text","text":"surrounded by a pair of square brackets:"}]},{"type":"codeListing","syntax":"markdown","code":["[<#key 1#>: <#value 1#>, <#key 2#>: <#value 2#>, <#key 3#>: <#value 3#>]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below creates a dictionary to store the names of international airports."},{"type":"text","text":" "},{"type":"text","text":"In this dictionary, the keys are three-letter International Air Transport Association codes,"},{"type":"text","text":" "},{"type":"text","text":"and the values are airport names:"}]},{"type":"codeListing","syntax":"swift","code":["var airports: [String: String] = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is declared as having a type of "},{"type":"codeVoice","code":"[String: String]"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which means “a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" whose keys are of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and whose values are also of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"”."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer),"},{"type":"text","text":" "},{"type":"text","text":"and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer),"},{"type":"text","text":" "},{"type":"text","text":"because more airports are added to the dictionary in the examples below."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is initialized with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary literal containing two key-value pairs."},{"type":"text","text":" "},{"type":"text","text":"The first pair has a key of "},{"type":"codeVoice","code":"\"YYZ\""},{"type":"text","text":" and a value of "},{"type":"codeVoice","code":"\"Toronto Pearson\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The second pair has a key of "},{"type":"codeVoice","code":"\"DUB\""},{"type":"text","text":" and a value of "},{"type":"codeVoice","code":"\"Dublin\""},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This dictionary literal contains two "},{"type":"codeVoice","code":"String: String"},{"type":"text","text":" pairs."},{"type":"text","text":" "},{"type":"text","text":"This key-value type matches the type of the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" variable declaration"},{"type":"text","text":" "},{"type":"text","text":"(a dictionary with only "},{"type":"codeVoice","code":"String"},{"type":"text","text":" keys, and only "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values),"},{"type":"text","text":" "},{"type":"text","text":"and so the assignment of the dictionary literal is permitted"},{"type":"text","text":" "},{"type":"text","text":"as a way to initialize the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary with two initial items."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with arrays,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to write the type of the dictionary"},{"type":"text","text":" "},{"type":"text","text":"if you’re initializing it with a dictionary literal whose keys and values have consistent types."},{"type":"text","text":" "},{"type":"text","text":"The initialization of "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"type":"codeListing","syntax":"swift","code":["var airports = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because all keys in the literal are of the same type as each other,"},{"type":"text","text":" "},{"type":"text","text":"and likewise all values are of the same type as each other,"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer that "},{"type":"codeVoice","code":"[String: String]"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary."}]},{"anchor":"Accessing-and-Modifying-a-Dictionary","level":3,"type":"heading","text":"Accessing and Modifying a Dictionary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a dictionary through its methods and properties,"},{"type":"text","text":" "},{"type":"text","text":"or by using subscript syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with an array, you find out the number of items in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" "},{"type":"text","text":"by checking its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The airports dictionary contains \\(airports.count) items.\")","\/\/ Prints \"The airports dictionary contains 2 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if airports.isEmpty {","   print(\"The airports dictionary is empty.\")","} else {","   print(\"The airports dictionary isn't empty.\")","}","\/\/ Prints \"The airports dictionary isn't empty.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a new item to a dictionary with subscript syntax."},{"type":"text","text":" "},{"type":"text","text":"Use a new key of the appropriate type as the subscript index,"},{"type":"text","text":" "},{"type":"text","text":"and assign a new value of the appropriate type:"}]},{"type":"codeListing","syntax":"swift","code":["airports[\"LHR\"] = \"London\"","\/\/ the airports dictionary now contains 3 items"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use subscript syntax to change the value associated with a particular key:"}]},{"type":"codeListing","syntax":"swift","code":["airports[\"LHR\"] = \"London Heathrow\"","\/\/ the value for \"LHR\" has been changed to \"London Heathrow\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an alternative to subscripting,"},{"type":"text","text":" "},{"type":"text","text":"use a dictionary’s "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to set or update the value for a particular key."},{"type":"text","text":" "},{"type":"text","text":"Like the subscript examples above, the "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"sets a value for a key if none exists,"},{"type":"text","text":" "},{"type":"text","text":"or updates the value if that key already exists."},{"type":"text","text":" "},{"type":"text","text":"Unlike a subscript, however,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method returns the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"old"}]},{"type":"text","text":" value after performing an update."},{"type":"text","text":" "},{"type":"text","text":"This enables you to check whether or not an update took place."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method returns an optional value"},{"type":"text","text":" "},{"type":"text","text":"of the dictionary’s value type."},{"type":"text","text":" "},{"type":"text","text":"For a dictionary that stores "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values, for example,"},{"type":"text","text":" "},{"type":"text","text":"the method returns a value of type "},{"type":"codeVoice","code":"String?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"This optional value contains the old value for that key if one existed before the update,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if no value existed:"}]},{"type":"codeListing","syntax":"swift","code":["if let oldValue = airports.updateValue(\"Dublin Airport\", forKey: \"DUB\") {","   print(\"The old value for DUB was \\(oldValue).\")","}","\/\/ Prints \"The old value for DUB was Dublin.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use subscript syntax to retrieve a value from the dictionary for a particular key."},{"type":"text","text":" "},{"type":"text","text":"Because it’s possible to request a key for which no value exists,"},{"type":"text","text":" "},{"type":"text","text":"a dictionary’s subscript returns an optional value of the dictionary’s value type."},{"type":"text","text":" "},{"type":"text","text":"If the dictionary contains a value for the requested key,"},{"type":"text","text":" "},{"type":"text","text":"the subscript returns an optional value containing the existing value for that key."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the subscript returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let airportName = airports[\"DUB\"] {","   print(\"The name of the airport is \\(airportName).\")","} else {","   print(\"That airport isn't in the airports dictionary.\")","}","\/\/ Prints \"The name of the airport is Dublin Airport.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to remove a key-value pair from a dictionary"},{"type":"text","text":" "},{"type":"text","text":"by assigning a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for that key:"}]},{"type":"codeListing","syntax":"swift","code":["airports[\"APL\"] = \"Apple International\"","\/\/ \"Apple International\" isn't the real airport for APL, so delete it","airports[\"APL\"] = nil","\/\/ APL has now been removed from the dictionary"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, remove a key-value pair from a dictionary"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"removeValue(forKey:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This method removes the key-value pair if it exists"},{"type":"text","text":" "},{"type":"text","text":"and returns the removed value,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if no value existed:"}]},{"type":"codeListing","syntax":"swift","code":["if let removedValue = airports.removeValue(forKey: \"DUB\") {","   print(\"The removed airport's name is \\(removedValue).\")","} else {","   print(\"The airports dictionary doesn't contain a value for DUB.\")","}","\/\/ Prints \"The removed airport's name is Dublin Airport.\""]},{"anchor":"Iterating-Over-a-Dictionary","level":3,"type":"heading","text":"Iterating Over a Dictionary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the key-value pairs in a dictionary with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."},{"type":"text","text":" "},{"type":"text","text":"Each item in the dictionary is returned as a "},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple,"},{"type":"text","text":" "},{"type":"text","text":"and you can decompose the tuple’s members into temporary constants or variables"},{"type":"text","text":" "},{"type":"text","text":"as part of the iteration:"}]},{"type":"codeListing","syntax":"swift","code":["for (airportCode, airportName) in airports {","   print(\"\\(airportCode): \\(airportName)\")","}","\/\/ LHR: London Heathrow","\/\/ YYZ: Toronto Pearson"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also retrieve an iterable collection of a dictionary’s keys or values"},{"type":"text","text":" "},{"type":"text","text":"by accessing its "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" and "},{"type":"codeVoice","code":"values"},{"type":"text","text":" properties:"}]},{"type":"codeListing","syntax":"swift","code":["for airportCode in airports.keys {","   print(\"Airport code: \\(airportCode)\")","}","\/\/ Airport code: LHR","\/\/ Airport code: YYZ","","for airportName in airports.values {","   print(\"Airport name: \\(airportName)\")","}","\/\/ Airport name: London Heathrow","\/\/ Airport name: Toronto Pearson"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to use a dictionary’s keys or values"},{"type":"text","text":" "},{"type":"text","text":"with an API that takes an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance, initialize a new array"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" or "},{"type":"codeVoice","code":"values"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["let airportCodes = [String](airports.keys)","\/\/ airportCodes is [\"LHR\", \"YYZ\"]","","let airportNames = [String](airports.values)","\/\/ airportNames is [\"London Heathrow\", \"Toronto Pearson\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type doesn’t have a defined ordering."},{"type":"text","text":" "},{"type":"text","text":"To iterate over the keys or values of a dictionary in a specific order,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"sorted()"},{"type":"text","text":" method on its "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" or "},{"type":"codeVoice","code":"values"},{"type":"text","text":" property."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/collectiontypes"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"type":"text","text":" "},{"type":"text","text":"Sets are unordered collections of unique values."},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Collection Types","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"https://developer.apple.com/documentation/swift/dictionary#2846239":{"title":"Bridging Between Dictionary and NSDictionary","titleInlineContent":[{"type":"text","text":"Bridging Between Dictionary and NSDictionary"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","url":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#For-In-Loops":{"abstract":[],"title":"For-In Loops","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops","url":"\/documentation\/the-swift-programming-language\/controlflow#For-In-Loops"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Structures and Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a programming language for iOS, macOS, watchOS, and tvOS app development."},{"type":"text","text":" "},{"type":"text","text":"If you have experience developing in C or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"many parts of Swift will be familiar to you."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"https://developer.apple.com/documentation/swift/hashable":{"title":"Hashable","titleInlineContent":[{"type":"text","text":"Hashable"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","url":"https:\/\/developer.apple.com\/documentation\/swift\/hashable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"CollectionTypes_intro":{"alt":null,"type":"image","identifier":"CollectionTypes_intro","variants":[{"url":"\/images\/CollectionTypes_intro~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift provides several advanced operators that perform more complex value manipulation."},{"type":"text","text":" "},{"type":"text","text":"These include all of the bitwise and bit shifting operators you will be familiar with"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"setEulerDiagram":{"alt":null,"type":"image","identifier":"setEulerDiagram","variants":[{"url":"\/images\/setEulerDiagram@2x.png","traits":["2x","light"]},{"url":"\/images\/setEulerDiagram~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"type":"text","text":"for which you don’t have access to the original source code"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"https://developer.apple.com/documentation/swift/array#2846730":{"title":"Bridging Between Array and NSArray","titleInlineContent":[{"type":"text","text":"Bridging Between Array and NSArray"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","url":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"type":"text","text":" "},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later,"},{"type":"text","text":" "},{"type":"text","text":"although only one piece of the program executes at a time."},{"type":"text","text":" "},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"type":"text","text":" "},{"type":"text","text":"while continuing to work on long-running operations"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"carries out multiple operations at a time;"},{"type":"text","text":" "},{"type":"text","text":"it suspends operations that are waiting for an external system,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Basic Operators","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"setVennDiagram":{"alt":null,"type":"image","identifier":"setVennDiagram","variants":[{"url":"\/images\/setVennDiagram@2x.png","traits":["2x","light"]},{"url":"\/images\/setVennDiagram~dark@2x.png","traits":["2x","dark"]}]},"https://developer.apple.com/documentation/swift/set#2845530":{"title":"Bridging Between Set and NSSet","titleInlineContent":[{"type":"text","text":"Bridging Between Set and NSSet"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","url":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530"}}}