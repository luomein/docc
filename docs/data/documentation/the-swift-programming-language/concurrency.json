{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The additional scheduling flexibility from parallel or asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"also comes with a cost of increased complexity."},{"type":"text","text":" "},{"type":"text","text":"Swift lets you express your intent"},{"type":"text","text":" "},{"type":"text","text":"in a way that enables some compile-time checking —"},{"type":"text","text":" "},{"type":"text","text":"for example, you can use actors to safely access mutable state."},{"type":"text","text":" "},{"type":"text","text":"However, adding concurrency to slow or buggy code"},{"type":"text","text":" "},{"type":"text","text":"isn’t a guarantee that it will become fast or correct."},{"type":"text","text":" "},{"type":"text","text":"In fact, adding concurrency might even make your code harder to debug."},{"type":"text","text":" "},{"type":"text","text":"However, using Swift’s language-level support for concurrency"},{"type":"text","text":" "},{"type":"text","text":"in code that needs to be concurrent"},{"type":"text","text":" "},{"type":"text","text":"means Swift can help you catch problems at compile time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rest of this chapter uses the term "},{"type":"emphasis","inlineContent":[{"type":"text","text":"concurrency"}]},{"type":"text","text":" "},{"type":"text","text":"to refer to this common combination of asynchronous and parallel code."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’ve written concurrent code before,"},{"type":"text","text":" "},{"type":"text","text":"you might be used to working with threads."},{"type":"text","text":" "},{"type":"text","text":"The concurrency model in Swift is built on top of threads,"},{"type":"text","text":" "},{"type":"text","text":"but you don’t interact with them directly."},{"type":"text","text":" "},{"type":"text","text":"An asynchronous function in Swift"},{"type":"text","text":" "},{"type":"text","text":"can give up the thread that it’s running on,"},{"type":"text","text":" "},{"type":"text","text":"which lets another asynchronous function run on that thread"},{"type":"text","text":" "},{"type":"text","text":"while the first function is blocked."},{"type":"text","text":" "},{"type":"text","text":"When an asynchronous function resumes,"},{"type":"text","text":" "},{"type":"text","text":"Swift doesn’t make any guarantee about which thread"},{"type":"text","text":" "},{"type":"text","text":"that function will run on."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although it’s possible to write concurrent code"},{"type":"text","text":" "},{"type":"text","text":"without using Swift’s language support,"},{"type":"text","text":" "},{"type":"text","text":"that code tends to be harder to read."},{"type":"text","text":" "},{"type":"text","text":"For example, the following code downloads a list of photo names,"},{"type":"text","text":" "},{"type":"text","text":"downloads the first photo in that list,"},{"type":"text","text":" "},{"type":"text","text":"and shows that photo to the user:"}]},{"type":"codeListing","syntax":"swift","code":["listPhotos(inGallery: \"Summer Vacation\") { photoNames in","    let sortedNames = photoNames.sorted()","    let name = sortedNames[0]","    downloadPhoto(named: name) { photo in","        show(photo)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even in this simple case,"},{"type":"text","text":" "},{"type":"text","text":"because the code has to be written as a series of completion handlers,"},{"type":"text","text":" "},{"type":"text","text":"you end up writing nested closures."},{"type":"text","text":" "},{"type":"text","text":"In this style,"},{"type":"text","text":" "},{"type":"text","text":"more complex code with deep nesting can quickly become unwieldy."}]},{"anchor":"Defining-and-Calling-Asynchronous-Functions","level":2,"type":"heading","text":"Defining and Calling Asynchronous Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"asynchronous function"}]},{"type":"text","text":" or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"asynchronous method"}]},{"type":"text","text":" "},{"type":"text","text":"is a special kind of function or method"},{"type":"text","text":" "},{"type":"text","text":"that can be suspended while it’s partway through execution."},{"type":"text","text":" "},{"type":"text","text":"This is in contrast to ordinary, synchronous functions and methods,"},{"type":"text","text":" "},{"type":"text","text":"which either run to completion, throw an error, or never return."},{"type":"text","text":" "},{"type":"text","text":"An asynchronous function or method still does one of those three things,"},{"type":"text","text":" "},{"type":"text","text":"but it can also pause in the middle when it’s waiting for something."},{"type":"text","text":" "},{"type":"text","text":"Inside the body of an asynchronous function or method,"},{"type":"text","text":" "},{"type":"text","text":"you mark each of these places where execution can be suspended."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a function or method is asynchronous,"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"async"},{"type":"text","text":" keyword in its declaration after its parameters,"},{"type":"text","text":" "},{"type":"text","text":"similar to how you use "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" to mark a throwing function."},{"type":"text","text":" "},{"type":"text","text":"If the function or method returns a value,"},{"type":"text","text":" "},{"type":"text","text":"you write "},{"type":"codeVoice","code":"async"},{"type":"text","text":" before the return arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s how you might fetch the names of photos in a gallery:"}]},{"type":"codeListing","syntax":"swift","code":["func listPhotos(inGallery name: String) async -> [String] {","    let result = \/\/ ... some asynchronous networking code ...","    return result","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a function or method that’s both asynchronous and throwing,"},{"type":"text","text":" "},{"type":"text","text":"you write "},{"type":"codeVoice","code":"async"},{"type":"text","text":" before "},{"type":"codeVoice","code":"throws"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When calling an asynchronous method,"},{"type":"text","text":" "},{"type":"text","text":"execution suspends until that method returns."},{"type":"text","text":" "},{"type":"text","text":"You write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" in front of the call"},{"type":"text","text":" "},{"type":"text","text":"to mark the possible suspension point."},{"type":"text","text":" "},{"type":"text","text":"This is like writing "},{"type":"codeVoice","code":"try"},{"type":"text","text":" when calling a throwing function,"},{"type":"text","text":" "},{"type":"text","text":"to mark the possible change to the program’s flow if there’s an error."},{"type":"text","text":" "},{"type":"text","text":"Inside an asynchronous method,"},{"type":"text","text":" "},{"type":"text","text":"the flow of execution is suspended "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" when you call another asynchronous method —"},{"type":"text","text":" "},{"type":"text","text":"suspension is never implicit or preemptive —"},{"type":"text","text":" "},{"type":"text","text":"which means every possible suspension point is marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the code below fetches the names of all the pictures in a gallery"},{"type":"text","text":" "},{"type":"text","text":"and then shows the first picture:"}]},{"type":"codeListing","syntax":"swift","code":["let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","let sortedNames = photoNames.sorted()","let name = sortedNames[0]","let photo = await downloadPhoto(named: name)","show(photo)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" functions"},{"type":"text","text":" "},{"type":"text","text":"both need to make network requests,"},{"type":"text","text":" "},{"type":"text","text":"they could take a relatively long time to complete."},{"type":"text","text":" "},{"type":"text","text":"Making them both asynchronous by writing "},{"type":"codeVoice","code":"async"},{"type":"text","text":" before the return arrow"},{"type":"text","text":" "},{"type":"text","text":"lets the rest of the app’s code keep running"},{"type":"text","text":" "},{"type":"text","text":"while this code waits for the picture to be ready."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To understand the concurrent nature of the example above,"},{"type":"text","text":" "},{"type":"text","text":"here’s one possible order of execution:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The code starts running from the first line"},{"type":"text","text":" "},{"type":"text","text":"and runs up to the first "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It calls the "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"and suspends execution while it waits for that function to return."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"While this code’s execution is suspended,"},{"type":"text","text":" "},{"type":"text","text":"some other concurrent code in the same program runs."},{"type":"text","text":" "},{"type":"text","text":"For example, maybe a long-running background task"},{"type":"text","text":" "},{"type":"text","text":"continues updating a list of new photo galleries."},{"type":"text","text":" "},{"type":"text","text":"That code also runs until the next suspension point, marked by "},{"type":"codeVoice","code":"await"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or until it completes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" returns,"},{"type":"text","text":" "},{"type":"text","text":"this code continues execution starting at that point."},{"type":"text","text":" "},{"type":"text","text":"It assigns the value that was returned to "},{"type":"codeVoice","code":"photoNames"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The lines that define "},{"type":"codeVoice","code":"sortedNames"},{"type":"text","text":" and "},{"type":"codeVoice","code":"name"},{"type":"text","text":" "},{"type":"text","text":"are regular, synchronous code."},{"type":"text","text":" "},{"type":"text","text":"Because nothing is marked "},{"type":"codeVoice","code":"await"},{"type":"text","text":" on these lines,"},{"type":"text","text":" "},{"type":"text","text":"there aren’t any possible suspension points."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The next "},{"type":"codeVoice","code":"await"},{"type":"text","text":" marks the call to the "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"This code pauses execution again until that function returns,"},{"type":"text","text":" "},{"type":"text","text":"giving other concurrent code an opportunity to run."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" returns,"},{"type":"text","text":" "},{"type":"text","text":"its return value is assigned to "},{"type":"codeVoice","code":"photo"},{"type":"text","text":" "},{"type":"text","text":"and then passed as an argument when calling "},{"type":"codeVoice","code":"show(_:)"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The possible suspension points in your code marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"indicate that the current piece of code might pause execution"},{"type":"text","text":" "},{"type":"text","text":"while waiting for the asynchronous function or method to return."},{"type":"text","text":" "},{"type":"text","text":"This is also called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"yielding the thread"}]},{"type":"text","text":" "},{"type":"text","text":"because, behind the scenes,"},{"type":"text","text":" "},{"type":"text","text":"Swift suspends the execution of your code on the current thread"},{"type":"text","text":" "},{"type":"text","text":"and runs some other code on that thread instead."},{"type":"text","text":" "},{"type":"text","text":"Because code with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" needs to be able to suspend execution,"},{"type":"text","text":" "},{"type":"text","text":"only certain places in your program can call asynchronous functions or methods:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in the body of an asynchronous function, method, or property."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in the static "},{"type":"codeVoice","code":"main()"},{"type":"text","text":" method of"},{"type":"text","text":" "},{"type":"text","text":"a structure, class, or enumeration that’s marked with "},{"type":"codeVoice","code":"@main"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in an unstructured child task,"},{"type":"text","text":" "},{"type":"text","text":"as shown in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency"},{"type":"text","text":" below."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in between possible suspension points runs sequentially,"},{"type":"text","text":" "},{"type":"text","text":"without the possibility of interruption from other concurrent code."},{"type":"text","text":" "},{"type":"text","text":"For example, the code below moves a picture from one gallery to another."}]},{"type":"codeListing","syntax":"swift","code":["let firstPhoto = await listPhotos(inGallery: \"Summer Vacation\")[0]","add(firstPhoto, toGallery: \"Road Trip\")","\/\/ At this point, firstPhoto is temporarily in both galleries.","remove(firstPhoto, fromGallery: \"Summer Vacation\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s no way for other code to run in between"},{"type":"text","text":" "},{"type":"text","text":"the call to "},{"type":"codeVoice","code":"add(_:toGallery:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"remove(_:fromGallery:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"During that time, the first photo appears in both galleries,"},{"type":"text","text":" "},{"type":"text","text":"temporarily breaking one of the app’s invariants."},{"type":"text","text":" "},{"type":"text","text":"To make it even clearer that this chunk of code"},{"type":"text","text":" "},{"type":"text","text":"must not have "},{"type":"codeVoice","code":"await"},{"type":"text","text":" added to it in the future,"},{"type":"text","text":" "},{"type":"text","text":"you can refactor that code into a synchronous function:"}]},{"type":"codeListing","syntax":"swift","code":["func move(_ photoName: String, from source: String, to destination: String) {","    add(photoName, toGallery: destination)","    remove(photoName, fromGallery: source)","}","\/\/ ...","let firstPhoto = await listPhotos(inGallery: \"Summer Vacation\")[0]","move(firstPhoto, from: \"Summer Vacation\", to: \"Road Trip\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"because the "},{"type":"codeVoice","code":"move(_:from:to:)"},{"type":"text","text":" function is synchronous,"},{"type":"text","text":" "},{"type":"text","text":"you guarantee that it can never contain possible suspension points."},{"type":"text","text":" "},{"type":"text","text":"In the future,"},{"type":"text","text":" "},{"type":"text","text":"if you try to add concurrent code to this function,"},{"type":"text","text":" "},{"type":"text","text":"introducing a possible suspension point,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get compile-time error instead of introducing a bug."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"is useful when writing simple code"},{"type":"text","text":" "},{"type":"text","text":"to learn how concurrency works."},{"type":"text","text":" "},{"type":"text","text":"This method does nothing,"},{"type":"text","text":" "},{"type":"text","text":"but waits at least the given number of nanoseconds before it returns."},{"type":"text","text":" "},{"type":"text","text":"Here’s a version of the "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"that uses "},{"type":"codeVoice","code":"sleep(until:tolerance:clock:)"},{"type":"text","text":" to simulate waiting for a network operation:"}]},{"type":"codeListing","syntax":"swift","code":["func listPhotos(inGallery name: String) async throws -> [String] {","    try await Task.sleep(until: .now + .seconds(2), clock: .continuous)","    return [\"IMG001\", \"IMG99\", \"IMG0404\"]","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"@Comment {"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"test: "},{"type":"codeVoice","code":"sleep-in-toy-code"}]}]}]},{"type":"codeListing","syntax":"swifttest","code":[">> struct Data {}  \/\/ Instead of actually importing Foundation","-> func listPhotos(inGallery name: String) async throws -> [String] {","       try await Task.sleep(until: .now + .seconds(2), clock: .continuous)","       return [\"IMG001\", \"IMG99\", \"IMG0404\"]","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"}"}]}],"type":"aside","name":"Note"},{"anchor":"Asynchronous-Sequences","level":2,"type":"heading","text":"Asynchronous Sequences"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" function in the previous section"},{"type":"text","text":" "},{"type":"text","text":"asynchronously returns the whole array at once,"},{"type":"text","text":" "},{"type":"text","text":"after all of the array’s elements are ready."},{"type":"text","text":" "},{"type":"text","text":"Another approach"},{"type":"text","text":" "},{"type":"text","text":"is to wait for one element of the collection at a time"},{"type":"text","text":" "},{"type":"text","text":"using an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"asynchronous sequence"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Here’s what iterating over an asynchronous sequence looks like:"}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","","let handle = FileHandle.standardInput","for try await line in handle.bytes.lines {","    print(line)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using an ordinary "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"the example above writes "},{"type":"codeVoice","code":"for"},{"type":"text","text":" with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" after it."},{"type":"text","text":" "},{"type":"text","text":"Like when you call an asynchronous function or method,"},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":"await"},{"type":"text","text":" indicates a possible suspension point."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"await"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop potentially suspends execution"},{"type":"text","text":" "},{"type":"text","text":"at the beginning of each iteration,"},{"type":"text","text":" "},{"type":"text","text":"when it’s waiting for the next element to be available."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the same way that you can use your own types in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop"},{"type":"text","text":" "},{"type":"text","text":"by adding conformance to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"you can use your own types in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"await"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop"},{"type":"text","text":" "},{"type":"text","text":"by adding conformance to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"}"}]},{"anchor":"Calling-Asynchronous-Functions-in-Parallel","level":2,"type":"heading","text":"Calling Asynchronous Functions in Parallel"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling an asynchronous function with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"runs only one piece of code at a time."},{"type":"text","text":" "},{"type":"text","text":"While the asynchronous code is running,"},{"type":"text","text":" "},{"type":"text","text":"the caller waits for that code to finish"},{"type":"text","text":" "},{"type":"text","text":"before moving on to run the next line of code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"to fetch the first three photos from a gallery,"},{"type":"text","text":" "},{"type":"text","text":"you could await three calls to the "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"as follows:"}]},{"type":"codeListing","syntax":"swift","code":["let firstPhoto = await downloadPhoto(named: photoNames[0])","let secondPhoto = await downloadPhoto(named: photoNames[1])","let thirdPhoto = await downloadPhoto(named: photoNames[2])","","let photos = [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach has an important drawback:"},{"type":"text","text":" "},{"type":"text","text":"Although the download is asynchronous"},{"type":"text","text":" "},{"type":"text","text":"and lets other work happen while it progresses,"},{"type":"text","text":" "},{"type":"text","text":"only one call to "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" runs at a time."},{"type":"text","text":" "},{"type":"text","text":"Each photo downloads completely before the next one starts downloading."},{"type":"text","text":" "},{"type":"text","text":"However, there’s no need for these operations to wait —"},{"type":"text","text":" "},{"type":"text","text":"each photo can download independently, or even at the same time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To call an asynchronous function"},{"type":"text","text":" "},{"type":"text","text":"and let it run in parallel with code around it,"},{"type":"text","text":" "},{"type":"text","text":"write "},{"type":"codeVoice","code":"async"},{"type":"text","text":" in front of "},{"type":"codeVoice","code":"let"},{"type":"text","text":" when you define a constant,"},{"type":"text","text":" "},{"type":"text","text":"and then write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" each time you use the constant."}]},{"type":"codeListing","syntax":"swift","code":["async let firstPhoto = downloadPhoto(named: photoNames[0])","async let secondPhoto = downloadPhoto(named: photoNames[1])","async let thirdPhoto = downloadPhoto(named: photoNames[2])","","let photos = await [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"all three calls to "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" start"},{"type":"text","text":" "},{"type":"text","text":"without waiting for the previous one to complete."},{"type":"text","text":" "},{"type":"text","text":"If there are enough system resources available, they can run at the same time."},{"type":"text","text":" "},{"type":"text","text":"None of these function calls are marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"because the code doesn’t suspend to wait for the function’s result."},{"type":"text","text":" "},{"type":"text","text":"Instead, execution continues"},{"type":"text","text":" "},{"type":"text","text":"until the line where "},{"type":"codeVoice","code":"photos"},{"type":"text","text":" is defined —"},{"type":"text","text":" "},{"type":"text","text":"at that point, the program needs the results from these asynchronous calls,"},{"type":"text","text":" "},{"type":"text","text":"so you write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" to pause execution"},{"type":"text","text":" "},{"type":"text","text":"until all three photos finish downloading."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how you can think about the differences between these two approaches:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call asynchronous functions with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"when the code on the following lines depends on that function’s result."},{"type":"text","text":" "},{"type":"text","text":"This creates work that is carried out sequentially."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call asynchronous functions with "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"when you don’t need the result until later in your code."},{"type":"text","text":" "},{"type":"text","text":"This creates work that can be carried out in parallel."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"await"},{"type":"text","text":" and "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"allow other code to run while they’re suspended."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, you mark the possible suspension point with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"to indicate that execution will pause, if needed,"},{"type":"text","text":" "},{"type":"text","text":"until an asynchronous function has returned."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also mix both of these approaches in the same code."}]},{"anchor":"Tasks-and-Task-Groups","level":2,"type":"heading","text":"Tasks and Task Groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"task"}]},{"type":"text","text":" is a unit of work"},{"type":"text","text":" "},{"type":"text","text":"that can be run asynchronously as part of your program."},{"type":"text","text":" "},{"type":"text","text":"All asynchronous code runs as part of some task."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" syntax described in the previous section"},{"type":"text","text":" "},{"type":"text","text":"creates a child task for you."},{"type":"text","text":" "},{"type":"text","text":"You can also create a task group"},{"type":"text","text":" "},{"type":"text","text":"and add child tasks to that group,"},{"type":"text","text":" "},{"type":"text","text":"which gives you more control over priority and cancellation,"},{"type":"text","text":" "},{"type":"text","text":"and lets you create a dynamic number of tasks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tasks are arranged in a hierarchy."},{"type":"text","text":" "},{"type":"text","text":"Each task in a task group has the same parent task,"},{"type":"text","text":" "},{"type":"text","text":"and each task can have child tasks."},{"type":"text","text":" "},{"type":"text","text":"Because of the explicit relationship between tasks and task groups,"},{"type":"text","text":" "},{"type":"text","text":"this approach is called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"structured concurrency"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Although you take on some of the responsibility for correctness,"},{"type":"text","text":" "},{"type":"text","text":"the explicit parent-child relationships between tasks"},{"type":"text","text":" "},{"type":"text","text":"lets Swift handle some behaviors like propagating cancellation for you,"},{"type":"text","text":" "},{"type":"text","text":"and lets Swift detect some errors at compile time."}]},{"type":"codeListing","syntax":"markdown","code":["await withTaskGroup(of: Data.self) { taskGroup in","    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","    for name in photoNames {","        taskGroup.addTask { await downloadPhoto(named: name) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about task groups,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup"},{"type":"text","text":"."}]},{"anchor":"Unstructured-Concurrency","level":3,"type":"heading","text":"Unstructured Concurrency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the structured approaches to concurrency"},{"type":"text","text":" "},{"type":"text","text":"described in the previous sections,"},{"type":"text","text":" "},{"type":"text","text":"Swift also supports unstructured concurrency."},{"type":"text","text":" "},{"type":"text","text":"Unlike tasks that are part of a task group,"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unstructured task"}]},{"type":"text","text":" doesn’t have a parent task."},{"type":"text","text":" "},{"type":"text","text":"You have complete flexibility to manage unstructured tasks"},{"type":"text","text":" "},{"type":"text","text":"in whatever way your program needs,"},{"type":"text","text":" "},{"type":"text","text":"but you’re also completely responsible for their correctness."},{"type":"text","text":" "},{"type":"text","text":"To create an unstructured task that runs on the current actor,"},{"type":"text","text":" "},{"type":"text","text":"call the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"To create an unstructured task that’s not part of the current actor,"},{"type":"text","text":" "},{"type":"text","text":"known more specifically as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"detached task"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"call the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached"},{"type":"text","text":" class method."},{"type":"text","text":" "},{"type":"text","text":"Both of these operations return a task that you can interact with —"},{"type":"text","text":" "},{"type":"text","text":"for example, to wait for its result or to cancel it."}]},{"type":"codeListing","syntax":"markdown","code":["let newPhoto = \/\/ ... some photo data ...","let handle = Task {","    return await add(newPhoto, toGalleryNamed: \"Spring Adventures\")","}","let result = await handle.value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about managing detached tasks,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task"},{"type":"text","text":"."}]},{"anchor":"Task-Cancellation","level":3,"type":"heading","text":"Task Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift concurrency uses a cooperative cancellation model."},{"type":"text","text":" "},{"type":"text","text":"Each task checks whether it has been canceled"},{"type":"text","text":" "},{"type":"text","text":"at the appropriate points in its execution,"},{"type":"text","text":" "},{"type":"text","text":"and responds to cancellation in whatever way is appropriate."},{"type":"text","text":" "},{"type":"text","text":"Depending on the work you’re doing,"},{"type":"text","text":" "},{"type":"text","text":"that usually means one of the following:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing an error like "},{"type":"codeVoice","code":"CancellationError"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or an empty collection"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning the partially completed work"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check for cancellation,"},{"type":"text","text":" "},{"type":"text","text":"either call "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which throws "},{"type":"codeVoice","code":"CancellationError"},{"type":"text","text":" if the task has been canceled,"},{"type":"text","text":" "},{"type":"text","text":"or check the value of "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled"},{"type":"text","text":" "},{"type":"text","text":"and handle the cancellation in your own code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"a task that’s downloading photos from a gallery"},{"type":"text","text":" "},{"type":"text","text":"might need to delete partial downloads and close network connections."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To propagate cancellation manually,"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel"},{"type":"text","text":"."}]},{"anchor":"Actors","level":2,"type":"heading","text":"Actors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use tasks to break up your program into isolated, concurrent pieces."},{"type":"text","text":" "},{"type":"text","text":"Tasks are isolated from each other,"},{"type":"text","text":" "},{"type":"text","text":"which is what makes it safe for them to run at the same time,"},{"type":"text","text":" "},{"type":"text","text":"but sometimes you need to share some information between tasks."},{"type":"text","text":" "},{"type":"text","text":"Actors let you safely share information between concurrent code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like classes, actors are reference types,"},{"type":"text","text":" "},{"type":"text","text":"so the comparison of value types and reference types"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types"},{"type":"text","text":" "},{"type":"text","text":"applies to actors as well as classes."},{"type":"text","text":" "},{"type":"text","text":"Unlike classes,"},{"type":"text","text":" "},{"type":"text","text":"actors allow only one task to access their mutable state at a time,"},{"type":"text","text":" "},{"type":"text","text":"which makes it safe for code in multiple tasks"},{"type":"text","text":" "},{"type":"text","text":"to interact with the same instance of an actor."},{"type":"text","text":" "},{"type":"text","text":"For example, here’s an actor that records temperatures:"}]},{"type":"codeListing","syntax":"swift","code":["actor TemperatureLogger {","    let label: String","    var measurements: [Int]","    private(set) var max: Int","","    init(label: String, measurement: Int) {","        self.label = label","        self.measurements = [measurement]","        self.max = measurement","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You introduce an actor with the "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"followed by its definition in a pair of braces."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"TemperatureLogger"},{"type":"text","text":" actor has properties"},{"type":"text","text":" "},{"type":"text","text":"that other code outside the actor can access,"},{"type":"text","text":" "},{"type":"text","text":"and restricts the "},{"type":"codeVoice","code":"max"},{"type":"text","text":" property so only code inside the actor"},{"type":"text","text":" "},{"type":"text","text":"can update the maximum value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You create an instance of an actor"},{"type":"text","text":" "},{"type":"text","text":"using the same initializer syntax as structures and classes."},{"type":"text","text":" "},{"type":"text","text":"When you access a property or method of an actor,"},{"type":"text","text":" "},{"type":"text","text":"you use "},{"type":"codeVoice","code":"await"},{"type":"text","text":" to mark the potential suspension point."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"markdown","code":["let logger = TemperatureLogger(label: \"Outdoors\", measurement: 25)","print(await logger.max)","\/\/ Prints \"25\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"accessing "},{"type":"codeVoice","code":"logger.max"},{"type":"text","text":" is a possible suspension point."},{"type":"text","text":" "},{"type":"text","text":"Because the actor allows only one task at a time to access its mutable state,"},{"type":"text","text":" "},{"type":"text","text":"if code from another task is already interacting with the logger,"},{"type":"text","text":" "},{"type":"text","text":"this code suspends while it waits to access the property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"code that’s part of the actor doesn’t write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"when accessing the actor’s properties."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s a method that updates a "},{"type":"codeVoice","code":"TemperatureLogger"},{"type":"text","text":" with a new temperature:"}]},{"type":"codeListing","syntax":"markdown","code":["extension TemperatureLogger {","    func update(with measurement: Int) {","        measurements.append(measurement)","        if measurement > max {","            max = measurement","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" method is already running on the actor,"},{"type":"text","text":" "},{"type":"text","text":"so it doesn’t mark its access to properties like "},{"type":"codeVoice","code":"max"},{"type":"text","text":" with "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method also shows one of the reasons"},{"type":"text","text":" "},{"type":"text","text":"why actors allow only one task at a time to interact with their mutable state:"},{"type":"text","text":" "},{"type":"text","text":"Some updates to an actor’s state temporarily break invariants."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"TemperatureLogger"},{"type":"text","text":" actor keeps track of"},{"type":"text","text":" "},{"type":"text","text":"a list of temperatures and a maximum temperature,"},{"type":"text","text":" "},{"type":"text","text":"and it updates the maximum temperature when you record a new measurement."},{"type":"text","text":" "},{"type":"text","text":"In the middle of an update,"},{"type":"text","text":" "},{"type":"text","text":"after appending the new measurement but before updating "},{"type":"codeVoice","code":"max"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the temperature logger is in a temporary inconsistent state."},{"type":"text","text":" "},{"type":"text","text":"Preventing multiple tasks from interacting with the same instance simultaneously"},{"type":"text","text":" "},{"type":"text","text":"prevents problems like the following sequence of events:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your code calls the "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"It updates the "},{"type":"codeVoice","code":"measurements"},{"type":"text","text":" array first."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before your code can update "},{"type":"codeVoice","code":"max"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"code elsewhere reads the maximum value and the array of temperatures."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your code finishes its update by changing "},{"type":"codeVoice","code":"max"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case,"},{"type":"text","text":" "},{"type":"text","text":"the code running elsewhere would read incorrect information"},{"type":"text","text":" "},{"type":"text","text":"because its access to the actor was interleaved"},{"type":"text","text":" "},{"type":"text","text":"in the middle of the call to "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" "},{"type":"text","text":"while the data was temporarily invalid."},{"type":"text","text":" "},{"type":"text","text":"You can prevent this problem when using Swift actors"},{"type":"text","text":" "},{"type":"text","text":"because they only allow one operation on their state at a time,"},{"type":"text","text":" "},{"type":"text","text":"and because that code can be interrupted"},{"type":"text","text":" "},{"type":"text","text":"only in places where "},{"type":"codeVoice","code":"await"},{"type":"text","text":" marks a suspension point."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" doesn’t contain any suspension points,"},{"type":"text","text":" "},{"type":"text","text":"no other code can access the data in the middle of an update."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to access those properties from outside the actor,"},{"type":"text","text":" "},{"type":"text","text":"like you would with an instance of a class,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"markdown","code":["print(logger.max)  \/\/ Error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Accessing "},{"type":"codeVoice","code":"logger.max"},{"type":"text","text":" without writing "},{"type":"codeVoice","code":"await"},{"type":"text","text":" fails because"},{"type":"text","text":" "},{"type":"text","text":"the properties of an actor are part of that actor’s isolated local state."},{"type":"text","text":" "},{"type":"text","text":"Swift guarantees that"},{"type":"text","text":" "},{"type":"text","text":"only code inside an actor can access the actor’s local state."},{"type":"text","text":" "},{"type":"text","text":"This guarantee is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"actor isolation"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"extension TemperatureLogger {"},{"type":"text","text":" "},{"type":"text","text":"func addReading(from reading: TemperatureReading) {"},{"type":"text","text":" "},{"type":"text","text":"measurements.append(reading.measurement)"},{"type":"text","text":" "},{"type":"text","text":"}"},{"type":"text","text":" "},{"type":"text","text":"}"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"let logger = TemperatureLogger(label: “Tea kettle”, measurement: 85)"},{"type":"text","text":" "},{"type":"text","text":"let reading = TemperatureReading(measurement: 45)"},{"type":"text","text":" "},{"type":"text","text":"await logger.addReading(from: reading)"}]},{"type":"codeListing","syntax":"markdown","code":["","","@Comment {","  - test: `actors`","  ","  ```swifttest","  -> struct TemperatureReading: Sendable {","         var measurement: Int","     }","  ---","  -> extension TemperatureLogger {","         func addReading(from reading: TemperatureReading) {","             measurements.append(reading.measurement)","         }","     }","  ---","  -> let logger = TemperatureLogger(label: \"Tea kettle\", measurement: 85)","  -> let reading = TemperatureReading(measurement: 45)","  -> await logger.addReading(from: reading)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"}"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"TemperatureReading"},{"type":"text","text":" is a structure that has only sendable properties,"},{"type":"text","text":" "},{"type":"text","text":"and the structure isn’t marked "},{"type":"codeVoice","code":"public"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@usableFromInline"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s implicitly sendable."},{"type":"text","text":" "},{"type":"text","text":"Here’s a version of the structure"},{"type":"text","text":" "},{"type":"text","text":"where conformance to the "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" protocol is implied:"}]},{"type":"codeListing","syntax":"swift","code":["struct TemperatureReading {","    var measurement: Int","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"@Comment {"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"test: "},{"type":"codeVoice","code":"actors-implicitly-sendable"}]}]}]},{"type":"codeListing","syntax":"swifttest","code":["-> struct TemperatureReading {","       var measurement: Int","   }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"}"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"@Comment {"},{"type":"text","text":" "},{"type":"text","text":"OUTLINE"},{"type":"text","text":" "},{"type":"text","text":".. _Concurrency_MainActor:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Main Actor"}]},{"type":"codeListing","syntax":"markdown","code":["","","- the main actor is kinda-sorta like the main thread","","- use it when you have shared mutable state,","but that state isn't neatly wrapped up in a single type","","- you can put it on a function,","which makes calls to the function always run on the main actor","","- you can put it on a type,","which makes calls to all of the type's methods run on the main actor","","- some property wrappers like ``@EnvironmentObject`` from SwiftUI","imply ``@MainActor`` on a type.","Check for a ``wrappedValue`` that's marked ``@MainActor``.","If you mark the property of a type with one of these implicit-main-actor properties,","that has the same effect as marking the type with ``@MainActor``","you can wait for each child of a task","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/concurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"type":"text","text":" "},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later,"},{"type":"text","text":" "},{"type":"text","text":"although only one piece of the program executes at a time."},{"type":"text","text":" "},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"type":"text","text":" "},{"type":"text","text":"while continuing to work on long-running operations"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"carries out multiple operations at a time;"},{"type":"text","text":" "},{"type":"text","text":"it suspends operations that are waiting for an external system,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Concurrency","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"https://developer.apple.com/documentation/swift/asyncsequence":{"title":"AsyncSequence","titleInlineContent":[{"type":"text","text":"AsyncSequence"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","url":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence"},"https://developer.apple.com/documentation/swift/task/3856786-detached":{"title":"Task.detached(priority:operation:)","titleInlineContent":[{"type":"text","text":"Task.detached(priority:operation:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift provides several advanced operators that perform more complex value manipulation."},{"type":"text","text":" "},{"type":"text","text":"These include all of the bitwise and bit shifting operators you will be familiar with"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Structures and Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"type":"text","text":"for which you don’t have access to the original source code"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Basic Operators","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency#Unstructured-Concurrency":{"abstract":[],"title":"Unstructured Concurrency","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency","url":"\/documentation\/the-swift-programming-language\/concurrency#Unstructured-Concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"https://developer.apple.com/documentation/swift/sequence":{"title":"Sequence","titleInlineContent":[{"type":"text","text":"Sequence"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"https://developer.apple.com/documentation/swift/task/3856790-init":{"title":"Task.init(priority:operation:)","titleInlineContent":[{"type":"text","text":"Task.init(priority:operation:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init"},"https://developer.apple.com/documentation/swift/task/3814826-checkcancellation":{"title":"Task.checkCancellation()","titleInlineContent":[{"type":"text","text":"Task.checkCancellation()"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation"},"https://developer.apple.com/documentation/swift/task/3851218-cancel":{"title":"Task.cancel()","titleInlineContent":[{"type":"text","text":"Task.cancel()"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel"},"https://developer.apple.com/documentation/swift/task/3814832-iscancelled":{"title":"Task.isCancelled","titleInlineContent":[{"type":"text","text":"Task.isCancelled"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"https://developer.apple.com/documentation/swift/task/sleep(until:tolerance:clock:)":{"title":"Task.sleep(until:tolerance:clock:)","titleInlineContent":[{"type":"text","text":"Task.sleep(until:tolerance:clock:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a programming language for iOS, macOS, watchOS, and tvOS app development."},{"type":"text","text":" "},{"type":"text","text":"If you have experience developing in C or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"many parts of Swift will be familiar to you."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"type":"text","text":" "},{"type":"text","text":"Sets are unordered collections of unique values."},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Classes-Are-Reference-Types":{"abstract":[],"title":"Classes Are Reference Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types","url":"\/documentation\/the-swift-programming-language\/classesandstructures#Classes-Are-Reference-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"https://developer.apple.com/documentation/swift/task":{"title":"Task","titleInlineContent":[{"type":"text","text":"Task"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task","url":"https:\/\/developer.apple.com\/documentation\/swift\/task"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"https://developer.apple.com/documentation/swift/taskgroup":{"title":"TaskGroup","titleInlineContent":[{"type":"text","text":"TaskGroup"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup","url":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup"}}}