{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions in Swift can:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add computed instance properties and computed type properties"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define instance methods and type methods"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide new initializers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define subscripts"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define and use new nested types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make an existing type conform to a protocol"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift,"},{"type":"text","text":" "},{"type":"text","text":"you can even extend a protocol to provide implementations of its requirements"},{"type":"text","text":" "},{"type":"text","text":"or add additional functionality that conforming types can take advantage of."},{"type":"text","text":" "},{"type":"text","text":"For more details, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new functionality to a type,"},{"type":"text","text":" "},{"type":"text","text":"but they can’t override existing functionality."}]}],"type":"aside","name":"Note"},{"anchor":"Extension-Syntax","level":2,"type":"heading","text":"Extension Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare extensions with the "},{"type":"codeVoice","code":"extension"},{"type":"text","text":" keyword:"}]},{"type":"codeListing","syntax":"swift","code":["extension SomeType {","   \/\/ new functionality to add to SomeType goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An extension can extend an existing type to make it adopt one or more protocols."},{"type":"text","text":" "},{"type":"text","text":"To add protocol conformance,"},{"type":"text","text":" "},{"type":"text","text":"you write the protocol names"},{"type":"text","text":" "},{"type":"text","text":"the same way as you write them for a class or structure:"}]},{"type":"codeListing","syntax":"swift","code":["extension SomeType: SomeProtocol, AnotherProtocol {","   \/\/ implementation of protocol requirements goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding protocol conformance in this way is described in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An extension can be used to extend an existing generic type,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can also extend a generic type to conditionally add functionality,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define an extension to add new functionality to an existing type,"},{"type":"text","text":" "},{"type":"text","text":"the new functionality will be available on all existing instances of that type,"},{"type":"text","text":" "},{"type":"text","text":"even if they were created before the extension was defined."}]}],"type":"aside","name":"Note"},{"anchor":"Computed-Properties","level":2,"type":"heading","text":"Computed Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add computed instance properties and computed type properties to existing types."},{"type":"text","text":" "},{"type":"text","text":"This example adds five computed instance properties to Swift’s built-in "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"to provide basic support for working with distance units:"}]},{"type":"codeListing","syntax":"swift","code":["extension Double {","   var km: Double { return self * 1_000.0 }","   var m: Double { return self }","   var cm: Double { return self \/ 100.0 }","   var mm: Double { return self \/ 1_000.0 }","   var ft: Double { return self \/ 3.28084 }","}","let oneInch = 25.4.mm","print(\"One inch is \\(oneInch) meters\")","\/\/ Prints \"One inch is 0.0254 meters\"","let threeFeet = 3.ft","print(\"Three feet is \\(threeFeet) meters\")","\/\/ Prints \"Three feet is 0.914399970739201 meters\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These computed properties express that a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"should be considered as a certain unit of length."},{"type":"text","text":" "},{"type":"text","text":"Although they’re implemented as computed properties,"},{"type":"text","text":" "},{"type":"text","text":"the names of these properties can be appended to"},{"type":"text","text":" "},{"type":"text","text":"a floating-point literal value with dot syntax,"},{"type":"text","text":" "},{"type":"text","text":"as a way to use that literal value to perform distance conversions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1.0"},{"type":"text","text":" is considered to represent “one meter”."},{"type":"text","text":" "},{"type":"text","text":"This is why the "},{"type":"codeVoice","code":"m"},{"type":"text","text":" computed property returns "},{"type":"codeVoice","code":"self"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"the expression "},{"type":"codeVoice","code":"1.m"},{"type":"text","text":" is considered to calculate a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1.0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other units require some conversion to be expressed as a value measured in meters."},{"type":"text","text":" "},{"type":"text","text":"One kilometer is the same as 1,000 meters,"},{"type":"text","text":" "},{"type":"text","text":"so the "},{"type":"codeVoice","code":"km"},{"type":"text","text":" computed property multiplies the value by "},{"type":"codeVoice","code":"1_000.00"},{"type":"text","text":" "},{"type":"text","text":"to convert into a number expressed in meters."},{"type":"text","text":" "},{"type":"text","text":"Similarly, there are 3.28084 feet in a meter,"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"ft"},{"type":"text","text":" computed property divides the underlying "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"by "},{"type":"codeVoice","code":"3.28084"},{"type":"text","text":", to convert it from feet to meters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These properties are read-only computed properties,"},{"type":"text","text":" "},{"type":"text","text":"and so they’re expressed without the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword, for brevity."},{"type":"text","text":" "},{"type":"text","text":"Their return value is of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and can be used within mathematical calculations wherever a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" is accepted:"}]},{"type":"codeListing","syntax":"swift","code":["let aMarathon = 42.km + 195.m","print(\"A marathon is \\(aMarathon) meters long\")","\/\/ Prints \"A marathon is 42195.0 meters long\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new computed properties, but they can’t add stored properties,"},{"type":"text","text":" "},{"type":"text","text":"or add property observers to existing properties."}]}],"type":"aside","name":"Note"},{"anchor":"Initializers","level":2,"type":"heading","text":"Initializers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new initializers to existing types."},{"type":"text","text":" "},{"type":"text","text":"This enables you to extend other types to accept"},{"type":"text","text":" "},{"type":"text","text":"your own custom types as initializer parameters,"},{"type":"text","text":" "},{"type":"text","text":"or to provide additional initialization options"},{"type":"text","text":" "},{"type":"text","text":"that were not included as part of the type’s original implementation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new convenience initializers to a class,"},{"type":"text","text":" "},{"type":"text","text":"but they can’t add new designated initializers or deinitializers to a class."},{"type":"text","text":" "},{"type":"text","text":"Designated initializers and deinitializers"},{"type":"text","text":" "},{"type":"text","text":"must always be provided by the original class implementation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use an extension to add an initializer to a value type that provides"},{"type":"text","text":" "},{"type":"text","text":"default values for all of its stored properties"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t define any custom initializers,"},{"type":"text","text":" "},{"type":"text","text":"you can call the default initializer and memberwise initializer for that value type"},{"type":"text","text":" "},{"type":"text","text":"from within your extension’s initializer."},{"type":"text","text":" "},{"type":"text","text":"This wouldn’t be the case if you had written the initializer"},{"type":"text","text":" "},{"type":"text","text":"as part of the value type’s original implementation,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use an extension to add an initializer to a structure"},{"type":"text","text":" "},{"type":"text","text":"that was declared in another module,"},{"type":"text","text":" "},{"type":"text","text":"the new initializer can’t access "},{"type":"codeVoice","code":"self"},{"type":"text","text":" until it calls"},{"type":"text","text":" "},{"type":"text","text":"an initializer from the defining module."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a custom "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure to represent a geometric rectangle."},{"type":"text","text":" "},{"type":"text","text":"The example also defines two supporting structures called "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Point"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"both of which provide default values of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" for all of their properties:"}]},{"type":"codeListing","syntax":"swift","code":["struct Size {","   var width = 0.0, height = 0.0","}","struct Point {","   var x = 0.0, y = 0.0","}","struct Rect {","   var origin = Point()","   var size = Size()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure provides default values for all of its properties,"},{"type":"text","text":" "},{"type":"text","text":"it receives a default initializer and a memberwise initializer automatically,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These initializers can be used to create new "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" instances:"}]},{"type":"codeListing","syntax":"swift","code":["let defaultRect = Rect()","let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),","   size: Size(width: 5.0, height: 5.0))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can extend the "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure to provide an additional initializer"},{"type":"text","text":" "},{"type":"text","text":"that takes a specific center point and size:"}]},{"type":"codeListing","syntax":"swift","code":["extension Rect {","   init(center: Point, size: Size) {","      let originX = center.x - (size.width \/ 2)","      let originY = center.y - (size.height \/ 2)","      self.init(origin: Point(x: originX, y: originY), size: size)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This new initializer starts by calculating an appropriate origin point based on"},{"type":"text","text":" "},{"type":"text","text":"the provided "},{"type":"codeVoice","code":"center"},{"type":"text","text":" point and "},{"type":"codeVoice","code":"size"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"The initializer then calls the structure’s automatic memberwise initializer"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":", which stores the new origin and size values"},{"type":"text","text":" "},{"type":"text","text":"in the appropriate properties:"}]},{"type":"codeListing","syntax":"swift","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","   size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you provide a new initializer with an extension,"},{"type":"text","text":" "},{"type":"text","text":"you are still responsible for making sure that each instance is fully initialized"},{"type":"text","text":" "},{"type":"text","text":"once the initializer completes."}]}],"type":"aside","name":"Note"},{"anchor":"Methods","level":2,"type":"heading","text":"Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new instance methods and type methods to existing types."},{"type":"text","text":" "},{"type":"text","text":"The following example adds a new instance method called "},{"type":"codeVoice","code":"repetitions"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   func repetitions(task: () -> Void) {","      for _ in 0..<self {","         task()","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"repetitions(task:)"},{"type":"text","text":" method takes a single argument of type "},{"type":"codeVoice","code":"() -> Void"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which indicates a function that has no parameters and doesn’t return a value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After defining this extension,"},{"type":"text","text":" "},{"type":"text","text":"you can call the "},{"type":"codeVoice","code":"repetitions(task:)"},{"type":"text","text":" method on any integer"},{"type":"text","text":" "},{"type":"text","text":"to perform a task that many number of times:"}]},{"type":"codeListing","syntax":"swift","code":["3.repetitions {","   print(\"Hello!\")","}","\/\/ Hello!","\/\/ Hello!","\/\/ Hello!"]},{"anchor":"Mutating-Instance-Methods","level":3,"type":"heading","text":"Mutating Instance Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance methods added with an extension can also modify (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutate"}]},{"type":"text","text":") the instance itself."},{"type":"text","text":" "},{"type":"text","text":"Structure and enumeration methods that modify "},{"type":"codeVoice","code":"self"},{"type":"text","text":" or its properties"},{"type":"text","text":" "},{"type":"text","text":"must mark the instance method as "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"just like mutating methods from an original implementation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below adds a new mutating method called "},{"type":"codeVoice","code":"square"},{"type":"text","text":" to Swift’s "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"which squares the original value:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   mutating func square() {","      self = self * self","   }","}","var someInt = 3","someInt.square()","\/\/ someInt is now 9"]},{"anchor":"Subscripts","level":2,"type":"heading","text":"Subscripts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new subscripts to an existing type."},{"type":"text","text":" "},{"type":"text","text":"This example adds an integer subscript to Swift’s built-in "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"This subscript "},{"type":"codeVoice","code":"[n]"},{"type":"text","text":" returns the decimal digit "},{"type":"codeVoice","code":"n"},{"type":"text","text":" places in"},{"type":"text","text":" "},{"type":"text","text":"from the right of the number:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"123456789[0]"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"9"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"123456789[1]"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"8"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and so on:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   subscript(digitIndex: Int) -> Int {","      var decimalBase = 1","      for _ in 0..<digitIndex {","         decimalBase *= 10","      }","      return (self \/ decimalBase) % 10","   }","}","746381295[0]","\/\/ returns 5","746381295[1]","\/\/ returns 9","746381295[2]","\/\/ returns 2","746381295[8]","\/\/ returns 7"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value doesn’t have enough digits for the requested index,"},{"type":"text","text":" "},{"type":"text","text":"the subscript implementation returns "},{"type":"codeVoice","code":"0"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as if the number had been padded with zeros to the left:"}]},{"type":"codeListing","syntax":"swift","code":["746381295[9]","\/\/ returns 0, as if you had requested:","0746381295[9]"]},{"anchor":"Nested-Types","level":2,"type":"heading","text":"Nested Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new nested types to existing classes, structures, and enumerations:"}]},{"type":"codeListing","syntax":"swift","code":["extension Int {","   enum Kind {","      case negative, zero, positive","   }","   var kind: Kind {","      switch self {","         case 0:","            return .zero","         case let x where x > 0:","            return .positive","         default:","            return .negative","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example adds a new nested enumeration to "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This enumeration, called "},{"type":"codeVoice","code":"Kind"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"expresses the kind of number that a particular integer represents."},{"type":"text","text":" "},{"type":"text","text":"Specifically, it expresses whether the number is"},{"type":"text","text":" "},{"type":"text","text":"negative, zero, or positive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also adds a new computed instance property to "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"kind"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns the appropriate "},{"type":"codeVoice","code":"Kind"},{"type":"text","text":" enumeration case for that integer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The nested enumeration can now be used with any "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value:"}]},{"type":"codeListing","syntax":"swift","code":["func printIntegerKinds(_ numbers: [Int]) {","   for number in numbers {","      switch number.kind {","         case .negative:","            print(\"- \", terminator: \"\")","         case .zero:","            print(\"0 \", terminator: \"\")","         case .positive:","            print(\"+ \", terminator: \"\")","      }","   }","   print(\"\")","}","printIntegerKinds([3, 19, -27, 0, -6, 0, 7])","\/\/ Prints \"+ + - 0 - 0 + \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function, "},{"type":"codeVoice","code":"printIntegerKinds(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"takes an input array of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values and iterates over those values in turn."},{"type":"text","text":" "},{"type":"text","text":"For each integer in the array,"},{"type":"text","text":" "},{"type":"text","text":"the function considers the "},{"type":"codeVoice","code":"kind"},{"type":"text","text":" computed property for that integer,"},{"type":"text","text":" "},{"type":"text","text":"and prints an appropriate description."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"number.kind"},{"type":"text","text":" is already known to be of type "},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because of this, all of the "},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":" case values"},{"type":"text","text":" "},{"type":"text","text":"can be written in shorthand form inside the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":".negative"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"Int.Kind.negative"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/extensions"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","interfaceLanguage":"swift"},"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"type":"text","text":"for which you don’t have access to the original source code"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Extensions","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"abstract":[],"title":"Protocol Extensions","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Structures and Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"type":"text","text":" "},{"type":"text","text":"Sets are unordered collections of unique values."},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a programming language for iOS, macOS, watchOS, and tvOS app development."},{"type":"text","text":" "},{"type":"text","text":"If you have experience developing in C or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"many parts of Swift will be familiar to you."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Adding-Protocol-Conformance-with-an-Extension":{"abstract":[],"title":"Adding Protocol Conformance with an Extension","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension","url":"\/documentation\/the-swift-programming-language\/protocols#Adding-Protocol-Conformance-with-an-Extension"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Basic Operators","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"abstract":[],"title":"Extensions with a Generic Where Clause","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Initializers":{"abstract":[],"title":"Default Initializers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers","url":"\/documentation\/the-swift-programming-language\/initialization#Default-Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift provides several advanced operators that perform more complex value manipulation."},{"type":"text","text":" "},{"type":"text","text":"These include all of the bitwise and bit shifting operators you will be familiar with"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"abstract":[],"title":"Extending a Generic Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Value-Types":{"abstract":[],"title":"Initializer Delegation for Value Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Value-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"type":"text","text":" "},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later,"},{"type":"text","text":" "},{"type":"text","text":"although only one piece of the program executes at a time."},{"type":"text","text":" "},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"type":"text","text":" "},{"type":"text","text":"while continuing to work on long-running operations"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"carries out multiple operations at a time;"},{"type":"text","text":" "},{"type":"text","text":"it suspends operations that are waiting for an external system,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"}}}