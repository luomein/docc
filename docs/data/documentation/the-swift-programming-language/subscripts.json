{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define multiple subscripts for a single type,"},{"type":"text","text":" "},{"type":"text","text":"and the appropriate subscript overload to use is selected"},{"type":"text","text":" "},{"type":"text","text":"based on the type of index value you pass to the subscript."},{"type":"text","text":" "},{"type":"text","text":"Subscripts aren’t limited to a single dimension,"},{"type":"text","text":" "},{"type":"text","text":"and you can define subscripts with multiple input parameters"},{"type":"text","text":" "},{"type":"text","text":"to suit your custom type’s needs."}]},{"anchor":"Subscript-Syntax","level":2,"type":"heading","text":"Subscript Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subscripts enable you to query instances of a type"},{"type":"text","text":" "},{"type":"text","text":"by writing one or more values in square brackets after the instance name."},{"type":"text","text":" "},{"type":"text","text":"Their syntax is similar to both instance method syntax and computed property syntax."},{"type":"text","text":" "},{"type":"text","text":"You write subscript definitions with the "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"and specify one or more input parameters and a return type,"},{"type":"text","text":" "},{"type":"text","text":"in the same way as instance methods."},{"type":"text","text":" "},{"type":"text","text":"Unlike instance methods, subscripts can be read-write or read-only."},{"type":"text","text":" "},{"type":"text","text":"This behavior is communicated by a getter and setter"},{"type":"text","text":" "},{"type":"text","text":"in the same way as for computed properties:"}]},{"type":"codeListing","syntax":"swift","code":["subscript(index: Int) -> Int {","   get {","      \/\/ Return an appropriate subscript value here.","   }","   set(newValue) {","      \/\/ Perform a suitable setting action here.","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":" is the same as the return value of the subscript."},{"type":"text","text":" "},{"type":"text","text":"As with computed properties, you can choose not to specify"},{"type":"text","text":" "},{"type":"text","text":"the setter’s "},{"type":"codeVoice","code":"(newValue)"},{"type":"text","text":" parameter."},{"type":"text","text":" "},{"type":"text","text":"A default parameter called "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":" is provided to your setter"},{"type":"text","text":" "},{"type":"text","text":"if you don’t provide one yourself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with read-only computed properties,"},{"type":"text","text":" "},{"type":"text","text":"you can simplify the declaration of a read-only subscript"},{"type":"text","text":" "},{"type":"text","text":"by removing the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword and its braces:"}]},{"type":"codeListing","syntax":"swift","code":["subscript(index: Int) -> Int {","   \/\/ Return an appropriate subscript value here.","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a read-only subscript implementation,"},{"type":"text","text":" "},{"type":"text","text":"which defines a "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" structure to represent an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"-times-table of integers:"}]},{"type":"codeListing","syntax":"swift","code":["struct TimesTable {","   let multiplier: Int","   subscript(index: Int) -> Int {","      return multiplier * index","   }","}","let threeTimesTable = TimesTable(multiplier: 3)","print(\"six times three is \\(threeTimesTable[6])\")","\/\/ Prints \"six times three is 18\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, a new instance of "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" is created"},{"type":"text","text":" "},{"type":"text","text":"to represent the three-times-table."},{"type":"text","text":" "},{"type":"text","text":"This is indicated by passing a value of "},{"type":"codeVoice","code":"3"},{"type":"text","text":" to the structure’s "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":" "},{"type":"text","text":"as the value to use for the instance’s "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" parameter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can query the "},{"type":"codeVoice","code":"threeTimesTable"},{"type":"text","text":" instance by calling its subscript,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the call to "},{"type":"codeVoice","code":"threeTimesTable[6]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This requests the sixth entry in the three-times-table,"},{"type":"text","text":" "},{"type":"text","text":"which returns a value of "},{"type":"codeVoice","code":"18"},{"type":"text","text":", or "},{"type":"codeVoice","code":"3"},{"type":"text","text":" times "},{"type":"codeVoice","code":"6"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"-times-table is based on a fixed mathematical rule."},{"type":"text","text":" "},{"type":"text","text":"It isn’t appropriate to set "},{"type":"codeVoice","code":"threeTimesTable[someIndex]"},{"type":"text","text":" to a new value,"},{"type":"text","text":" "},{"type":"text","text":"and so the subscript for "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" is defined as a read-only subscript."}]}],"type":"aside","name":"Note"},{"anchor":"Subscript-Usage","level":2,"type":"heading","text":"Subscript Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The exact meaning of “subscript” depends on the context in which it’s used."},{"type":"text","text":" "},{"type":"text","text":"Subscripts are typically used as a shortcut for accessing"},{"type":"text","text":" "},{"type":"text","text":"the member elements in a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You are free to implement subscripts in the most appropriate way for"},{"type":"text","text":" "},{"type":"text","text":"your particular class or structure’s functionality."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type implements a subscript"},{"type":"text","text":" "},{"type":"text","text":"to set and retrieve the values stored in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"You can set a value in a dictionary"},{"type":"text","text":" "},{"type":"text","text":"by providing a key of the dictionary’s key type within subscript brackets,"},{"type":"text","text":" "},{"type":"text","text":"and assigning a value of the dictionary’s value type to the subscript:"}]},{"type":"codeListing","syntax":"swift","code":["var numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","numberOfLegs[\"bird\"] = 2"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a variable called "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" "},{"type":"text","text":"and initializes it with a dictionary literal containing three key-value pairs."},{"type":"text","text":" "},{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" dictionary is inferred to be "},{"type":"codeVoice","code":"[String: Int]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After creating the dictionary,"},{"type":"text","text":" "},{"type":"text","text":"this example uses subscript assignment to add"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" key of "},{"type":"codeVoice","code":"\"bird\""},{"type":"text","text":" and an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"2"},{"type":"text","text":" to the dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" subscripting,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type implements its key-value subscripting"},{"type":"text","text":" "},{"type":"text","text":"as a subscript that takes and returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"For the "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" dictionary above,"},{"type":"text","text":" "},{"type":"text","text":"the key-value subscript takes and returns a value of type "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional int”."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type uses an optional subscript type to model the fact that"},{"type":"text","text":" "},{"type":"text","text":"not every key will have a value, and to give a way to delete a value for a key"},{"type":"text","text":" "},{"type":"text","text":"by assigning a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value for that key."}]}],"type":"aside","name":"Note"},{"anchor":"Subscript-Options","level":2,"type":"heading","text":"Subscript Options"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subscripts can take any number of input parameters,"},{"type":"text","text":" "},{"type":"text","text":"and these input parameters can be of any type."},{"type":"text","text":" "},{"type":"text","text":"Subscripts can also return a value of any type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like functions,"},{"type":"text","text":" "},{"type":"text","text":"subscripts can take a varying number of parameters"},{"type":"text","text":" "},{"type":"text","text":"and provide default values for their parameters,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, unlike functions,"},{"type":"text","text":" "},{"type":"text","text":"subscripts can’t use in-out parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A class or structure can provide as many subscript implementations as it needs,"},{"type":"text","text":" "},{"type":"text","text":"and the appropriate subscript to be used will be inferred based on"},{"type":"text","text":" "},{"type":"text","text":"the types of the value or values that are contained within the subscript brackets"},{"type":"text","text":" "},{"type":"text","text":"at the point that the subscript is used."},{"type":"text","text":" "},{"type":"text","text":"This definition of multiple subscripts is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscript overloading"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While it’s most common for a subscript to take a single parameter,"},{"type":"text","text":" "},{"type":"text","text":"you can also define a subscript with multiple parameters"},{"type":"text","text":" "},{"type":"text","text":"if it’s appropriate for your type."},{"type":"text","text":" "},{"type":"text","text":"The following example defines a "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" structure,"},{"type":"text","text":" "},{"type":"text","text":"which represents a two-dimensional matrix of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" structure’s subscript takes two integer parameters:"}]},{"type":"codeListing","syntax":"swift","code":["struct Matrix {","   let rows: Int, columns: Int","   var grid: [Double]","   init(rows: Int, columns: Int) {","      self.rows = rows","      self.columns = columns","      grid = Array(repeating: 0.0, count: rows * columns)","   }","   func indexIsValid(row: Int, column: Int) -> Bool {","      return row >= 0 && row < rows && column >= 0 && column < columns","   }","   subscript(row: Int, column: Int) -> Double {","      get {","         assert(indexIsValid(row: row, column: column), \"Index out of range\")","         return grid[(row * columns) + column]","      }","      set {","         assert(indexIsValid(row: row, column: column), \"Index out of range\")","         grid[(row * columns) + column] = newValue","      }","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" provides an initializer that takes two parameters called "},{"type":"codeVoice","code":"rows"},{"type":"text","text":" and "},{"type":"codeVoice","code":"columns"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and creates an array that’s large enough to store "},{"type":"codeVoice","code":"rows * columns"},{"type":"text","text":" values of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Each position in the matrix is given an initial value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To achieve this, the array’s size, and an initial cell value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"are passed to an array initializer that creates and initializes a new array of the correct size."},{"type":"text","text":" "},{"type":"text","text":"This initializer is described in more detail"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creating-an-Array-with-a-Default-Value"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can construct a new "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance by passing"},{"type":"text","text":" "},{"type":"text","text":"an appropriate row and column count to its initializer:"}]},{"type":"codeListing","syntax":"swift","code":["var matrix = Matrix(rows: 2, columns: 2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above creates a new "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance with two rows and two columns."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"grid"},{"type":"text","text":" array for this "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"is effectively a flattened version of the matrix,"},{"type":"text","text":" "},{"type":"text","text":"as read from top left to bottom right:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"subscriptMatrix01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Values in the matrix can be set by passing row and column values into the subscript,"},{"type":"text","text":" "},{"type":"text","text":"separated by a comma:"}]},{"type":"codeListing","syntax":"swift","code":["matrix[0, 1] = 1.5","matrix[1, 0] = 3.2"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These two statements call the subscript’s setter to set"},{"type":"text","text":" "},{"type":"text","text":"a value of "},{"type":"codeVoice","code":"1.5"},{"type":"text","text":" in the top right position of the matrix"},{"type":"text","text":" "},{"type":"text","text":"(where "},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" is "},{"type":"codeVoice","code":"1"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"3.2"},{"type":"text","text":" in the bottom left position"},{"type":"text","text":" "},{"type":"text","text":"(where "},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":"):"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"subscriptMatrix02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" subscript’s getter and setter both contain an assertion"},{"type":"text","text":" "},{"type":"text","text":"to check that the subscript’s  "},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" values are valid."},{"type":"text","text":" "},{"type":"text","text":"To assist with these assertions,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" includes a convenience method called "},{"type":"codeVoice","code":"indexIsValid(row:column:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which checks whether the requested "},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" "},{"type":"text","text":"are inside the bounds of the matrix:"}]},{"type":"codeListing","syntax":"swift","code":["func indexIsValid(row: Int, column: Int) -> Bool {","   return row >= 0 && row < rows && column >= 0 && column < columns","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An assertion is triggered if you try to access a subscript"},{"type":"text","text":" "},{"type":"text","text":"that’s outside of the matrix bounds:"}]},{"type":"codeListing","syntax":"swift","code":["let someValue = matrix[2, 2]","\/\/ This triggers an assert, because [2, 2] is outside of the matrix bounds."]},{"anchor":"Type-Subscripts","level":2,"type":"heading","text":"Type Subscripts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance subscripts, as described above,"},{"type":"text","text":" "},{"type":"text","text":"are subscripts that you call on an instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"You can also define subscripts that are called on the type itself."},{"type":"text","text":" "},{"type":"text","text":"This kind of subscript is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type subscript"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You indicate a type subscript"},{"type":"text","text":" "},{"type":"text","text":"by writing the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword before the "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Classes can use the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword instead,"},{"type":"text","text":" "},{"type":"text","text":"to allow subclasses to override the superclass’s implementation of that subscript."},{"type":"text","text":" "},{"type":"text","text":"The example below shows how you define and call a type subscript:"}]},{"type":"codeListing","syntax":"swift","code":["enum Planet: Int {","   case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","   static subscript(n: Int) -> Planet {","      return Planet(rawValue: n)!","   }","}","let mars = Planet[4]","print(mars)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/subscripts"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Subscripts","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Creating-an-Array-with-a-Default-Value":{"abstract":[],"title":"Creating an Array with a Default Value","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creating-an-Array-with-a-Default-Value","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Creating-an-Array-with-a-Default-Value"},"subscriptMatrix02":{"alt":null,"type":"image","identifier":"subscriptMatrix02","variants":[{"url":"\/images\/subscriptMatrix02@2x.png","traits":["2x","light"]},{"url":"\/images\/subscriptMatrix02~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Basic Operators","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"subscriptMatrix01":{"alt":null,"type":"image","identifier":"subscriptMatrix01","variants":[{"url":"\/images\/subscriptMatrix01@2x.png","traits":["2x","light"]},{"url":"\/images\/subscriptMatrix01~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Accessing-and-Modifying-a-Dictionary":{"abstract":[],"title":"Accessing and Modifying a Dictionary","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Accessing-and-Modifying-a-Dictionary"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a programming language for iOS, macOS, watchOS, and tvOS app development."},{"type":"text","text":" "},{"type":"text","text":"If you have experience developing in C or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"many parts of Swift will be familiar to you."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values":{"abstract":[],"title":"Default Parameter Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","url":"\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift provides several advanced operators that perform more complex value manipulation."},{"type":"text","text":" "},{"type":"text","text":"These include all of the bitwise and bit shifting operators you will be familiar with"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Variadic-Parameters":{"abstract":[],"title":"Variadic Parameters","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","url":"\/documentation\/the-swift-programming-language\/functions#Variadic-Parameters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"type":"text","text":" "},{"type":"text","text":"Sets are unordered collections of unique values."},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"type":"text","text":"for which you don’t have access to the original source code"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Structures and Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"type":"text","text":" "},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later,"},{"type":"text","text":" "},{"type":"text","text":"although only one piece of the program executes at a time."},{"type":"text","text":" "},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"type":"text","text":" "},{"type":"text","text":"while continuing to work on long-running operations"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"carries out multiple operations at a time;"},{"type":"text","text":" "},{"type":"text","text":"it suspends operations that are waiting for an external system,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"}}}