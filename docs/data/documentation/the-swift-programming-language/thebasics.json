{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides its own versions of all fundamental C and Objective-C types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for integers, "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Float"},{"type":"text","text":" for floating-point values,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" for Boolean values, and "},{"type":"codeVoice","code":"String"},{"type":"text","text":" for textual data."},{"type":"text","text":" "},{"type":"text","text":"Swift also provides powerful versions of the three primary collection types,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"type":"codeVoice","code":"Set"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like C, Swift uses variables to store and refer to values by an identifying name."},{"type":"text","text":" "},{"type":"text","text":"Swift also makes extensive use of variables whose values can’t be changed."},{"type":"text","text":" "},{"type":"text","text":"These are known as constants, and are much more powerful than constants in C."},{"type":"text","text":" "},{"type":"text","text":"Constants are used throughout Swift to make code safer and clearer in intent"},{"type":"text","text":" "},{"type":"text","text":"when you work with values that don’t need to change."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to familiar types,"},{"type":"text","text":" "},{"type":"text","text":"Swift introduces advanced types not found in Objective-C, such as tuples."},{"type":"text","text":" "},{"type":"text","text":"Tuples enable you to create and pass around groupings of values."},{"type":"text","text":" "},{"type":"text","text":"You can use a tuple to return multiple values from a function as a single compound value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also introduces optional types,"},{"type":"text","text":" "},{"type":"text","text":"which handle the absence of a value."},{"type":"text","text":" "},{"type":"text","text":"Optionals say either “there "},{"type":"emphasis","inlineContent":[{"type":"text","text":"is"}]},{"type":"text","text":" a value, and it equals "},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"or “there "},{"type":"emphasis","inlineContent":[{"type":"text","text":"isn’t"}]},{"type":"text","text":" a value at all”."},{"type":"text","text":" "},{"type":"text","text":"Using optionals is similar to using "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" with pointers in Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"but they work for any type, not just classes."},{"type":"text","text":" "},{"type":"text","text":"Not only are optionals safer and more expressive than "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" pointers in Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"they’re at the heart of many of Swift’s most powerful features."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-safe"}]},{"type":"text","text":" language,"},{"type":"text","text":" "},{"type":"text","text":"which means the language helps you to be clear about the types of values your code can work with."},{"type":"text","text":" "},{"type":"text","text":"If part of your code requires a "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"type safety prevents you from passing it an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" by mistake."},{"type":"text","text":" "},{"type":"text","text":"Likewise, type safety prevents you from"},{"type":"text","text":" "},{"type":"text","text":"accidentally passing an optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"to a piece of code that requires a non-optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Type safety helps you catch and fix errors as early as possible in the development process."}]},{"anchor":"Constants-and-Variables","level":2,"type":"heading","text":"Constants and Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables associate a name"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"maximumNumberOfLoginAttempts"},{"type":"text","text":" or "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"with a value of a particular type"},{"type":"text","text":" "},{"type":"text","text":"(such as the number "},{"type":"codeVoice","code":"10"},{"type":"text","text":" or the string "},{"type":"codeVoice","code":"\"Hello\""},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The value of a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constant"}]},{"type":"text","text":" can’t be changed once it’s set,"},{"type":"text","text":" "},{"type":"text","text":"whereas a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"variable"}]},{"type":"text","text":" can be set to a different value in the future."}]},{"anchor":"Declaring-Constants-and-Variables","level":3,"type":"heading","text":"Declaring Constants and Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables must be declared before they’re used."},{"type":"text","text":" "},{"type":"text","text":"You declare constants with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"and variables with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Here’s an example of how constants and variables can be used"},{"type":"text","text":" "},{"type":"text","text":"to track the number of login attempts a user has made:"}]},{"type":"codeListing","syntax":"swift","code":["let maximumNumberOfLoginAttempts = 10","var currentLoginAttempt = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Declare a new constant called "},{"type":"codeVoice","code":"maximumNumberOfLoginAttempts"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and give it a value of "},{"type":"codeVoice","code":"10"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Then, declare a new variable called "},{"type":"codeVoice","code":"currentLoginAttempt"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and give it an initial value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the maximum number of allowed login attempts is declared as a constant,"},{"type":"text","text":" "},{"type":"text","text":"because the maximum value never changes."},{"type":"text","text":" "},{"type":"text","text":"The current login attempt counter is declared as a variable,"},{"type":"text","text":" "},{"type":"text","text":"because this value must be incremented after each failed login attempt."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can declare multiple constants or multiple variables on a single line,"},{"type":"text","text":" "},{"type":"text","text":"separated by commas:"}]},{"type":"codeListing","syntax":"swift","code":["var x = 0.0, y = 0.0, z = 0.0"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a stored value in your code won’t change,"},{"type":"text","text":" "},{"type":"text","text":"always declare it as a constant with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Use variables only for storing values that need to be able to change."}]}],"type":"aside","name":"Note"},{"anchor":"Type-Annotations","level":3,"type":"heading","text":"Type Annotations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type annotation"}]},{"type":"text","text":" when you declare a constant or variable,"},{"type":"text","text":" "},{"type":"text","text":"to be clear about the kind of values the constant or variable can store."},{"type":"text","text":" "},{"type":"text","text":"Write a type annotation by placing a colon after the constant or variable name,"},{"type":"text","text":" "},{"type":"text","text":"followed by a space, followed by the name of the type to use."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example provides a type annotation for a variable called "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to indicate that the variable can store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}]},{"type":"codeListing","syntax":"swift","code":["var welcomeMessage: String"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The colon in the declaration means “…of type…,”"},{"type":"text","text":" "},{"type":"text","text":"so the code above can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Declare a variable called "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":" that’s of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The phrase “of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"” means “can store any "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value.”"},{"type":"text","text":" "},{"type":"text","text":"Think of it as meaning “the type of thing” (or “the kind of thing”) that can be stored."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":" variable can now be set to any string value without error:"}]},{"type":"codeListing","syntax":"swift","code":["welcomeMessage = \"Hello\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define multiple related variables of the same type on a single line,"},{"type":"text","text":" "},{"type":"text","text":"separated by commas, with a single type annotation after the final variable name:"}]},{"type":"codeListing","syntax":"swift","code":["var red, green, blue: Double"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s rare that you need to write type annotations in practice."},{"type":"text","text":" "},{"type":"text","text":"If you provide an initial value for a constant or variable at the point that it’s defined,"},{"type":"text","text":" "},{"type":"text","text":"Swift can almost always infer the type to be used for that constant or variable,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In the "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":" example above, no initial value is provided,"},{"type":"text","text":" "},{"type":"text","text":"and so the type of the "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":" variable is specified with a type annotation"},{"type":"text","text":" "},{"type":"text","text":"rather than being inferred from an initial value."}]}],"type":"aside","name":"Note"},{"anchor":"Naming-Constants-and-Variables","level":3,"type":"heading","text":"Naming Constants and Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constant and variable names can contain almost any character,"},{"type":"text","text":" "},{"type":"text","text":"including Unicode characters:"}]},{"type":"codeListing","syntax":"swift","code":["let π = 3.14159","let 你好 = \"你好世界\"","let 🐶🐮 = \"dogcow\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constant and variable names can’t contain"},{"type":"text","text":" "},{"type":"text","text":"whitespace characters, mathematical symbols, arrows, private-use Unicode scalar values,"},{"type":"text","text":" "},{"type":"text","text":"or line- and box-drawing characters."},{"type":"text","text":" "},{"type":"text","text":"Nor can they begin with a number,"},{"type":"text","text":" "},{"type":"text","text":"although numbers may be included elsewhere within the name."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you’ve declared a constant or variable of a certain type,"},{"type":"text","text":" "},{"type":"text","text":"you can’t declare it again with the same name,"},{"type":"text","text":" "},{"type":"text","text":"or change it to store values of a different type."},{"type":"text","text":" "},{"type":"text","text":"Nor can you change a constant into a variable"},{"type":"text","text":" "},{"type":"text","text":"or a variable into a constant."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to give a constant or variable the same name as a reserved Swift keyword,"},{"type":"text","text":" "},{"type":"text","text":"surround the keyword with backticks (```) when using it as a name."},{"type":"text","text":" "},{"type":"text","text":"However, avoid using keywords as names unless you have absolutely no choice."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can change the value of an existing variable to another value of a compatible type."},{"type":"text","text":" "},{"type":"text","text":"In this example, the value of "},{"type":"codeVoice","code":"friendlyWelcome"},{"type":"text","text":" is changed from"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"Hello!\""},{"type":"text","text":" to "},{"type":"codeVoice","code":"\"Bonjour!\""},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var friendlyWelcome = \"Hello!\"","friendlyWelcome = \"Bonjour!\"","\/\/ friendlyWelcome is now \"Bonjour!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a variable, the value of a constant can’t be changed after it’s set."},{"type":"text","text":" "},{"type":"text","text":"Attempting to do so is reported as an error when your code is compiled:"}]},{"type":"codeListing","syntax":"swift","code":["let languageName = \"Swift\"","languageName = \"Swift++\"","\/\/ This is a compile-time error: languageName cannot be changed."]},{"anchor":"Printing-Constants-and-Variables","level":3,"type":"heading","text":"Printing Constants and Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can print the current value of a constant or variable with the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function:"}]},{"type":"codeListing","syntax":"swift","code":["print(friendlyWelcome)","\/\/ Prints \"Bonjour!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"is a global function that prints one or more values"},{"type":"text","text":" "},{"type":"text","text":"to an appropriate output."},{"type":"text","text":" "},{"type":"text","text":"In Xcode, for example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function prints its output in Xcode’s “console” pane."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" and "},{"type":"codeVoice","code":"terminator"},{"type":"text","text":" parameter have default values,"},{"type":"text","text":" "},{"type":"text","text":"so you can omit them when you call this function."},{"type":"text","text":" "},{"type":"text","text":"By default, the function terminates the line it prints by adding a line break."},{"type":"text","text":" "},{"type":"text","text":"To print a value without a line break after it,"},{"type":"text","text":" "},{"type":"text","text":"pass an empty string as the terminator — for example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"print(someValue, terminator: \"\")"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For information about parameters with default values,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string interpolation"}]},{"type":"text","text":" to include the name of a constant or variable"},{"type":"text","text":" "},{"type":"text","text":"as a placeholder in a longer string,"},{"type":"text","text":" "},{"type":"text","text":"and to prompt Swift to replace it with the current value of that constant or variable."},{"type":"text","text":" "},{"type":"text","text":"Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")","\/\/ Prints \"The current value of friendlyWelcome is Bonjour!\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All options you can use with string interpolation"},{"type":"text","text":" "},{"type":"text","text":"are described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Comments","level":2,"type":"heading","text":"Comments"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use comments to include nonexecutable text in your code,"},{"type":"text","text":" "},{"type":"text","text":"as a note or reminder to yourself."},{"type":"text","text":" "},{"type":"text","text":"Comments are ignored by the Swift compiler when your code is compiled."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comments in Swift are very similar to comments in C."},{"type":"text","text":" "},{"type":"text","text":"Single-line comments begin with two forward-slashes ("},{"type":"codeVoice","code":"\/\/"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ This is a comment."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiline comments start with a forward-slash followed by an asterisk ("},{"type":"codeVoice","code":"\/*"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and end with an asterisk followed by a forward-slash ("},{"type":"codeVoice","code":"*\/"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["\/* This is also a comment","but is written over multiple lines. *\/"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike multiline comments in C,"},{"type":"text","text":" "},{"type":"text","text":"multiline comments in Swift can be nested inside other multiline comments."},{"type":"text","text":" "},{"type":"text","text":"You write nested comments by starting a multiline comment block"},{"type":"text","text":" "},{"type":"text","text":"and then starting a second multiline comment within the first block."},{"type":"text","text":" "},{"type":"text","text":"The second block is then closed, followed by the first block:"}]},{"type":"codeListing","syntax":"swift","code":["\/* This is the start of the first multiline comment.","   \/* This is the second, nested multiline comment. *\/","This is the end of the first multiline comment. *\/"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nested multiline comments enable you to comment out large blocks of code quickly and easily,"},{"type":"text","text":" "},{"type":"text","text":"even if the code already contains multiline comments."}]},{"anchor":"Semicolons","level":2,"type":"heading","text":"Semicolons"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike many other languages,"},{"type":"text","text":" "},{"type":"text","text":"Swift doesn’t require you to write a semicolon ("},{"type":"codeVoice","code":";"},{"type":"text","text":") after each statement in your code,"},{"type":"text","text":" "},{"type":"text","text":"although you can do so if you wish."},{"type":"text","text":" "},{"type":"text","text":"However, semicolons "},{"type":"emphasis","inlineContent":[{"type":"text","text":"are"}]},{"type":"text","text":" required"},{"type":"text","text":" "},{"type":"text","text":"if you want to write multiple separate statements on a single line:"}]},{"type":"codeListing","syntax":"swift","code":["let cat = \"🐱\"; print(cat)","\/\/ Prints \"🐱\""]},{"anchor":"Integers","level":2,"type":"heading","text":"Integers"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Integers"}]},{"type":"text","text":" are whole numbers with no fractional component,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"42"},{"type":"text","text":" and "},{"type":"codeVoice","code":"-23"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Integers are either "},{"type":"emphasis","inlineContent":[{"type":"text","text":"signed"}]},{"type":"text","text":" (positive, zero, or negative)"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unsigned"}]},{"type":"text","text":" (positive or zero)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms."},{"type":"text","text":" "},{"type":"text","text":"These integers follow a naming convention similar to C,"},{"type":"text","text":" "},{"type":"text","text":"in that an 8-bit unsigned integer is of type "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and a 32-bit signed integer is of type "},{"type":"codeVoice","code":"Int32"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Like all types in Swift, these integer types have capitalized names."}]},{"anchor":"Integer-Bounds","level":3,"type":"heading","text":"Integer Bounds"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access the minimum and maximum values of each integer type"},{"type":"text","text":" "},{"type":"text","text":"with its "},{"type":"codeVoice","code":"min"},{"type":"text","text":" and "},{"type":"codeVoice","code":"max"},{"type":"text","text":" properties:"}]},{"type":"codeListing","syntax":"swift","code":["let minValue = UInt8.min  \/\/ minValue is equal to 0, and is of type UInt8","let maxValue = UInt8.max  \/\/ maxValue is equal to 255, and is of type UInt8"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values of these properties are of the appropriate-sized number type"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" in the example above)"},{"type":"text","text":" "},{"type":"text","text":"and can therefore be used in expressions alongside other values of the same type."}]},{"anchor":"Int","level":3,"type":"heading","text":"Int"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In most cases, you don’t need to pick a specific size of integer to use in your code."},{"type":"text","text":" "},{"type":"text","text":"Swift provides an additional integer type, "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has the same size as the current platform’s native word size:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a 32-bit platform, "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is the same size as "},{"type":"codeVoice","code":"Int32"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a 64-bit platform, "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is the same size as "},{"type":"codeVoice","code":"Int64"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless you need to work with a specific size of integer,"},{"type":"text","text":" "},{"type":"text","text":"always use "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for integer values in your code."},{"type":"text","text":" "},{"type":"text","text":"This aids code consistency and interoperability."},{"type":"text","text":" "},{"type":"text","text":"Even on 32-bit platforms, "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" can store any value between "},{"type":"codeVoice","code":"-2,147,483,648"},{"type":"text","text":" and "},{"type":"codeVoice","code":"2,147,483,647"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and is large enough for many integer ranges."}]},{"anchor":"UInt","level":3,"type":"heading","text":"UInt"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also provides an unsigned integer type, "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has the same size as the current platform’s native word size:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a 32-bit platform, "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" is the same size as "},{"type":"codeVoice","code":"UInt32"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a 64-bit platform, "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" is the same size as "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":"."}]}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" only when you specifically need"},{"type":"text","text":" "},{"type":"text","text":"an unsigned integer type with the same size as the platform’s native word size."},{"type":"text","text":" "},{"type":"text","text":"If this isn’t the case, "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is preferred,"},{"type":"text","text":" "},{"type":"text","text":"even when the values to be stored are known to be nonnegative."},{"type":"text","text":" "},{"type":"text","text":"A consistent use of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for integer values aids code interoperability,"},{"type":"text","text":" "},{"type":"text","text":"avoids the need to convert between different number types,"},{"type":"text","text":" "},{"type":"text","text":"and matches integer type inference, as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Floating-Point-Numbers","level":2,"type":"heading","text":"Floating-Point Numbers"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Floating-point numbers"}]},{"type":"text","text":" are numbers with a fractional component,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"3.14159"},{"type":"text","text":", "},{"type":"codeVoice","code":"0.1"},{"type":"text","text":", and "},{"type":"codeVoice","code":"-273.15"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point types can represent a much wider range of values than integer types,"},{"type":"text","text":" "},{"type":"text","text":"and can store numbers that are much larger or smaller than can be stored in an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift provides two signed floating-point number types:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"},{"type":"text","text":" represents a 64-bit floating-point number."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Float"},{"type":"text","text":" represents a 32-bit floating-point number."}]}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"Double"},{"type":"text","text":" has a precision of at least 15 decimal digits,"},{"type":"text","text":" "},{"type":"text","text":"whereas the precision of "},{"type":"codeVoice","code":"Float"},{"type":"text","text":" can be as little as 6 decimal digits."},{"type":"text","text":" "},{"type":"text","text":"The appropriate floating-point type to use depends on the nature and range of"},{"type":"text","text":" "},{"type":"text","text":"values you need to work with in your code."},{"type":"text","text":" "},{"type":"text","text":"In situations where either type would be appropriate, "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" is preferred."}]}],"type":"aside","name":"Note"},{"anchor":"Type-Safety-and-Type-Inference","level":2,"type":"heading","text":"Type Safety and Type Inference"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-safe"}]},{"type":"text","text":" language."},{"type":"text","text":" "},{"type":"text","text":"A type safe language encourages you to be clear about"},{"type":"text","text":" "},{"type":"text","text":"the types of values your code can work with."},{"type":"text","text":" "},{"type":"text","text":"If part of your code requires a "},{"type":"codeVoice","code":"String"},{"type":"text","text":", you can’t pass it an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" by mistake."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because Swift is type safe,"},{"type":"text","text":" "},{"type":"text","text":"it performs "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type checks"}]},{"type":"text","text":" when compiling your code"},{"type":"text","text":" "},{"type":"text","text":"and flags any mismatched types as errors."},{"type":"text","text":" "},{"type":"text","text":"This enables you to catch and fix errors as early as possible in the development process."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type-checking helps you avoid errors when you’re working with different types of values."},{"type":"text","text":" "},{"type":"text","text":"However, this doesn’t mean that you have to specify the type of"},{"type":"text","text":" "},{"type":"text","text":"every constant and variable that you declare."},{"type":"text","text":" "},{"type":"text","text":"If you don’t specify the type of value you need,"},{"type":"text","text":" "},{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type inference"}]},{"type":"text","text":" to work out the appropriate type."},{"type":"text","text":" "},{"type":"text","text":"Type inference enables a compiler to"},{"type":"text","text":" "},{"type":"text","text":"deduce the type of a particular expression automatically when it compiles your code,"},{"type":"text","text":" "},{"type":"text","text":"simply by examining the values you provide."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of type inference, Swift requires far fewer type declarations"},{"type":"text","text":" "},{"type":"text","text":"than languages such as C or Objective-C."},{"type":"text","text":" "},{"type":"text","text":"Constants and variables are still explicitly typed,"},{"type":"text","text":" "},{"type":"text","text":"but much of the work of specifying their type is done for you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type inference is particularly useful"},{"type":"text","text":" "},{"type":"text","text":"when you declare a constant or variable with an initial value."},{"type":"text","text":" "},{"type":"text","text":"This is often done by assigning a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"literal value"}]},{"type":"text","text":" (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"literal"}]},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to the constant or variable at the point that you declare it."},{"type":"text","text":" "},{"type":"text","text":"(A literal value is a value that appears directly in your source code,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"42"},{"type":"text","text":" and "},{"type":"codeVoice","code":"3.14159"},{"type":"text","text":" in the examples below.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you assign a literal value of "},{"type":"codeVoice","code":"42"},{"type":"text","text":" to a new constant"},{"type":"text","text":" "},{"type":"text","text":"without saying what type it is,"},{"type":"text","text":" "},{"type":"text","text":"Swift infers that you want the constant to be an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because you have initialized it with a number that looks like an integer:"}]},{"type":"codeListing","syntax":"swift","code":["let meaningOfLife = 42","\/\/ meaningOfLife is inferred to be of type Int"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, if you don’t specify a type for a floating-point literal,"},{"type":"text","text":" "},{"type":"text","text":"Swift infers that you want to create a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let pi = 3.14159","\/\/ pi is inferred to be of type Double"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift always chooses "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" (rather than "},{"type":"codeVoice","code":"Float"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"when inferring the type of floating-point numbers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you combine integer and floating-point literals in an expression,"},{"type":"text","text":" "},{"type":"text","text":"a type of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" will be inferred from the context:"}]},{"type":"codeListing","syntax":"swift","code":["let anotherPi = 3 + 0.14159","\/\/ anotherPi is also inferred to be of type Double"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The literal value of "},{"type":"codeVoice","code":"3"},{"type":"text","text":" has no explicit type in and of itself,"},{"type":"text","text":" "},{"type":"text","text":"and so an appropriate output type of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" is inferred"},{"type":"text","text":" "},{"type":"text","text":"from the presence of a floating-point literal as part of the addition."}]},{"anchor":"Numeric-Literals","level":2,"type":"heading","text":"Numeric Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer literals can be written as:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal"}]},{"type":"text","text":" number, with no prefix"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"binary"}]},{"type":"text","text":" number, with a "},{"type":"codeVoice","code":"0b"},{"type":"text","text":" prefix"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"octal"}]},{"type":"text","text":" number, with a "},{"type":"codeVoice","code":"0o"},{"type":"text","text":" prefix"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"hexadecimal"}]},{"type":"text","text":" number, with a "},{"type":"codeVoice","code":"0x"},{"type":"text","text":" prefix"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these integer literals have a decimal value of "},{"type":"codeVoice","code":"17"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let decimalInteger = 17","let binaryInteger = 0b10001       \/\/ 17 in binary notation","let octalInteger = 0o21           \/\/ 17 in octal notation","let hexadecimalInteger = 0x11     \/\/ 17 in hexadecimal notation"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point literals can be decimal (with no prefix),"},{"type":"text","text":" "},{"type":"text","text":"or hexadecimal (with a "},{"type":"codeVoice","code":"0x"},{"type":"text","text":" prefix)."},{"type":"text","text":" "},{"type":"text","text":"They must always have a number (or hexadecimal number) on both sides of the decimal point."},{"type":"text","text":" "},{"type":"text","text":"Decimal floats can also have an optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"exponent"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"indicated by an uppercase or lowercase "},{"type":"codeVoice","code":"e"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"hexadecimal floats must have an exponent,"},{"type":"text","text":" "},{"type":"text","text":"indicated by an uppercase or lowercase "},{"type":"codeVoice","code":"p"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For decimal numbers with an exponent of "},{"type":"codeVoice","code":"x"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the base number is multiplied by 10ˣ:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1.25e2"},{"type":"text","text":" means 1.25 x 10², or "},{"type":"codeVoice","code":"125.0"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1.25e-2"},{"type":"text","text":" means 1.25 x 10⁻², or "},{"type":"codeVoice","code":"0.0125"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For hexadecimal numbers with an exponent of "},{"type":"codeVoice","code":"x"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the base number is multiplied by 2ˣ:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"0xFp2"},{"type":"text","text":" means 15 x 2², or "},{"type":"codeVoice","code":"60.0"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"0xFp-2"},{"type":"text","text":" means 15 x 2⁻², or "},{"type":"codeVoice","code":"3.75"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these floating-point literals have a decimal value of "},{"type":"codeVoice","code":"12.1875"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let decimalDouble = 12.1875","let exponentDouble = 1.21875e1","let hexadecimalDouble = 0xC.3p0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Numeric literals can contain extra formatting to make them easier to read."},{"type":"text","text":" "},{"type":"text","text":"Both integers and floats can be padded with extra zeros"},{"type":"text","text":" "},{"type":"text","text":"and can contain underscores to help with readability."},{"type":"text","text":" "},{"type":"text","text":"Neither type of formatting affects the underlying value of the literal:"}]},{"type":"codeListing","syntax":"swift","code":["let paddedDouble = 000123.456","let oneMillion = 1_000_000","let justOverOneMillion = 1_000_000.000_000_1"]},{"anchor":"Numeric-Type-Conversion","level":2,"type":"heading","text":"Numeric Type Conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type for all general-purpose integer constants and variables in your code,"},{"type":"text","text":" "},{"type":"text","text":"even if they’re known to be nonnegative."},{"type":"text","text":" "},{"type":"text","text":"Using the default integer type in everyday situations means that"},{"type":"text","text":" "},{"type":"text","text":"integer constants and variables are immediately interoperable in your code"},{"type":"text","text":" "},{"type":"text","text":"and will match the inferred type for integer literal values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use other integer types only when they’re specifically needed for the task at hand,"},{"type":"text","text":" "},{"type":"text","text":"because of explicitly sized data from an external source,"},{"type":"text","text":" "},{"type":"text","text":"or for performance, memory usage, or other necessary optimization."},{"type":"text","text":" "},{"type":"text","text":"Using explicitly sized types in these situations"},{"type":"text","text":" "},{"type":"text","text":"helps to catch any accidental value overflows"},{"type":"text","text":" "},{"type":"text","text":"and implicitly documents the nature of the data being used."}]},{"anchor":"Integer-Conversion","level":3,"type":"heading","text":"Integer Conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The range of numbers that can be stored in an integer constant or variable"},{"type":"text","text":" "},{"type":"text","text":"is different for each numeric type."},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" constant or variable can store numbers between "},{"type":"codeVoice","code":"-128"},{"type":"text","text":" and "},{"type":"codeVoice","code":"127"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereas a "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" constant or variable can store numbers between "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"255"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A number that won’t fit into a constant or variable of a sized integer type"},{"type":"text","text":" "},{"type":"text","text":"is reported as an error when your code is compiled:"}]},{"type":"codeListing","syntax":"swift","code":["let cannotBeNegative: UInt8 = -1","\/\/ UInt8 can't store negative numbers, and so this will report an error","let tooBig: Int8 = Int8.max + 1","\/\/ Int8 can't store a number larger than its maximum value,","\/\/ and so this will also report an error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because each numeric type can store a different range of values,"},{"type":"text","text":" "},{"type":"text","text":"you must opt in to numeric type conversion on a case-by-case basis."},{"type":"text","text":" "},{"type":"text","text":"This opt-in approach prevents hidden conversion errors"},{"type":"text","text":" "},{"type":"text","text":"and helps make type conversion intentions explicit in your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert one specific number type to another,"},{"type":"text","text":" "},{"type":"text","text":"you initialize a new number of the desired type with the existing value."},{"type":"text","text":" "},{"type":"text","text":"In the example below,"},{"type":"text","text":" "},{"type":"text","text":"the constant "},{"type":"codeVoice","code":"twoThousand"},{"type":"text","text":" is of type "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereas the constant "},{"type":"codeVoice","code":"one"},{"type":"text","text":" is of type "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"They can’t be added together directly,"},{"type":"text","text":" "},{"type":"text","text":"because they’re not of the same type."},{"type":"text","text":" "},{"type":"text","text":"Instead, this example calls "},{"type":"codeVoice","code":"UInt16(one)"},{"type":"text","text":" to create"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" initialized with the value of "},{"type":"codeVoice","code":"one"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and uses this value in place of the original:"}]},{"type":"codeListing","syntax":"swift","code":["let twoThousand: UInt16 = 2_000","let one: UInt8 = 1","let twoThousandAndOne = twoThousand + UInt16(one)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because both sides of the addition are now of type "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the addition is allowed."},{"type":"text","text":" "},{"type":"text","text":"The output constant ("},{"type":"codeVoice","code":"twoThousandAndOne"},{"type":"text","text":") is inferred to be of type "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because it’s the sum of two "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" values."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SomeType(ofInitialValue)"},{"type":"text","text":" is the default way to call the initializer of a Swift type"},{"type":"text","text":" "},{"type":"text","text":"and pass in an initial value."},{"type":"text","text":" "},{"type":"text","text":"Behind the scenes, "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" has an initializer that accepts a "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"and so this initializer is used to make a new "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" from an existing "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can’t pass in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type here, however —"},{"type":"text","text":" "},{"type":"text","text":"it has to be a type for which "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" provides an initializer."},{"type":"text","text":" "},{"type":"text","text":"Extending existing types to provide initializers that accept new types"},{"type":"text","text":" "},{"type":"text","text":"(including your own type definitions)"},{"type":"text","text":" "},{"type":"text","text":"is covered in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":"."}]},{"anchor":"Integer-and-Floating-Point-Conversion","level":3,"type":"heading","text":"Integer and Floating-Point Conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversions between integer and floating-point numeric types must be made explicit:"}]},{"type":"codeListing","syntax":"swift","code":["let three = 3","let pointOneFourOneFiveNine = 0.14159","let pi = Double(three) + pointOneFourOneFiveNine","\/\/ pi equals 3.14159, and is inferred to be of type Double"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, the value of the constant "},{"type":"codeVoice","code":"three"},{"type":"text","text":" is used to create a new value of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so that both sides of the addition are of the same type."},{"type":"text","text":" "},{"type":"text","text":"Without this conversion in place, the addition would not be allowed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point to integer conversion must also be made explicit."},{"type":"text","text":" "},{"type":"text","text":"An integer type can be initialized with a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Float"},{"type":"text","text":" value:"}]},{"type":"codeListing","syntax":"swift","code":["let integerPi = Int(pi)","\/\/ integerPi equals 3, and is inferred to be of type Int"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point values are always truncated when used to initialize a new integer value in this way."},{"type":"text","text":" "},{"type":"text","text":"This means that "},{"type":"codeVoice","code":"4.75"},{"type":"text","text":" becomes "},{"type":"codeVoice","code":"4"},{"type":"text","text":", and "},{"type":"codeVoice","code":"-3.9"},{"type":"text","text":" becomes "},{"type":"codeVoice","code":"-3"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The rules for combining numeric constants and variables are different from"},{"type":"text","text":" "},{"type":"text","text":"the rules for numeric literals."},{"type":"text","text":" "},{"type":"text","text":"The literal value "},{"type":"codeVoice","code":"3"},{"type":"text","text":" can be added directly to the literal value "},{"type":"codeVoice","code":"0.14159"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because number literals don’t have an explicit type in and of themselves."},{"type":"text","text":" "},{"type":"text","text":"Their type is inferred only at the point that they’re evaluated by the compiler."}]}],"type":"aside","name":"Note"},{"anchor":"Type-Aliases","level":2,"type":"heading","text":"Type Aliases"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type aliases"}]},{"type":"text","text":" define an alternative name for an existing type."},{"type":"text","text":" "},{"type":"text","text":"You define type aliases with the "},{"type":"codeVoice","code":"typealias"},{"type":"text","text":" keyword."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type aliases are useful when you want to refer to an existing type"},{"type":"text","text":" "},{"type":"text","text":"by a name that’s contextually more appropriate,"},{"type":"text","text":" "},{"type":"text","text":"such as when working with data of a specific size from an external source:"}]},{"type":"codeListing","syntax":"swift","code":["typealias AudioSample = UInt16"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you define a type alias,"},{"type":"text","text":" "},{"type":"text","text":"you can use the alias anywhere you might use the original name:"}]},{"type":"codeListing","syntax":"swift","code":["var maxAmplitudeFound = AudioSample.min","\/\/ maxAmplitudeFound is now 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, "},{"type":"codeVoice","code":"AudioSample"},{"type":"text","text":" is defined as an alias for "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because it’s an alias,"},{"type":"text","text":" "},{"type":"text","text":"the call to "},{"type":"codeVoice","code":"AudioSample.min"},{"type":"text","text":" actually calls "},{"type":"codeVoice","code":"UInt16.min"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which provides an initial value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxAmplitudeFound"},{"type":"text","text":" variable."}]},{"anchor":"Booleans","level":2,"type":"heading","text":"Booleans"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift has a basic "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Boolean"}]},{"type":"text","text":" type, called "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Boolean values are referred to as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because they can only ever be true or false."},{"type":"text","text":" "},{"type":"text","text":"Swift provides two Boolean constant values,"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let orangesAreOrange = true","let turnipsAreDelicious = false"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The types of "},{"type":"codeVoice","code":"orangesAreOrange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"turnipsAreDelicious"},{"type":"text","text":" "},{"type":"text","text":"have been inferred as "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" from the fact that"},{"type":"text","text":" "},{"type":"text","text":"they were initialized with Boolean literal values."},{"type":"text","text":" "},{"type":"text","text":"As with "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" above,"},{"type":"text","text":" "},{"type":"text","text":"you don’t need to declare constants or variables as "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" "},{"type":"text","text":"if you set them to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" as soon as you create them."},{"type":"text","text":" "},{"type":"text","text":"Type inference helps make Swift code more concise and readable"},{"type":"text","text":" "},{"type":"text","text":"when it initializes constants or variables with other values whose type is already known."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Boolean values are particularly useful when you work with conditional statements"},{"type":"text","text":" "},{"type":"text","text":"such as the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement:"}]},{"type":"codeListing","syntax":"swift","code":["if turnipsAreDelicious {","   print(\"Mmm, tasty turnips!\")","} else {","   print(\"Eww, turnips are horrible.\")","}","\/\/ Prints \"Eww, turnips are horrible.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditional statements such as the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement are covered in more detail in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s type safety prevents non-Boolean values from being substituted for "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The following example reports a compile-time error:"}]},{"type":"codeListing","syntax":"swift","code":["let i = 1","if i {","   \/\/ this example will not compile, and will report an error","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, the alternative example below is valid:"}]},{"type":"codeListing","syntax":"swift","code":["let i = 1","if i == 1 {","   \/\/ this example will compile successfully","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The result of the "},{"type":"codeVoice","code":"i == 1"},{"type":"text","text":" comparison is of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so this second example passes the type-check."},{"type":"text","text":" "},{"type":"text","text":"Comparisons like "},{"type":"codeVoice","code":"i == 1"},{"type":"text","text":" are discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with other examples of type safety in Swift,"},{"type":"text","text":" "},{"type":"text","text":"this approach avoids accidental errors"},{"type":"text","text":" "},{"type":"text","text":"and ensures that the intention of a particular section of code is always clear."}]},{"anchor":"Tuples","level":2,"type":"heading","text":"Tuples"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Tuples"}]},{"type":"text","text":" group multiple values into a single compound value."},{"type":"text","text":" "},{"type":"text","text":"The values within a tuple can be of any type"},{"type":"text","text":" "},{"type":"text","text":"and don’t have to be of the same type as each other."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, "},{"type":"codeVoice","code":"(404, \"Not Found\")"},{"type":"text","text":" is a tuple that describes an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"HTTP status code"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"An HTTP status code is a special value returned by a web server whenever you request a web page."},{"type":"text","text":" "},{"type":"text","text":"A status code of "},{"type":"codeVoice","code":"404 Not Found"},{"type":"text","text":" is returned if you request a webpage that doesn’t exist."}]},{"type":"codeListing","syntax":"swift","code":["let http404Error = (404, \"Not Found\")","\/\/ http404Error is of type (Int, String), and equals (404, \"Not Found\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"(404, \"Not Found\")"},{"type":"text","text":" tuple groups together an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"to give the HTTP status code two separate values:"},{"type":"text","text":" "},{"type":"text","text":"a number and a human-readable description."},{"type":"text","text":" "},{"type":"text","text":"It can be described as “a tuple of type "},{"type":"codeVoice","code":"(Int, String)"},{"type":"text","text":"”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create tuples from any permutation of types,"},{"type":"text","text":" "},{"type":"text","text":"and they can contain as many different types as you like."},{"type":"text","text":" "},{"type":"text","text":"There’s nothing stopping you from having"},{"type":"text","text":" "},{"type":"text","text":"a tuple of type "},{"type":"codeVoice","code":"(Int, Int, Int)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"(String, Bool)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or indeed any other permutation you require."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decompose"}]},{"type":"text","text":" a tuple’s contents into separate constants or variables,"},{"type":"text","text":" "},{"type":"text","text":"which you then access as usual:"}]},{"type":"codeListing","syntax":"swift","code":["let (statusCode, statusMessage) = http404Error","print(\"The status code is \\(statusCode)\")","\/\/ Prints \"The status code is 404\"","print(\"The status message is \\(statusMessage)\")","\/\/ Prints \"The status message is Not Found\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you only need some of the tuple’s values,"},{"type":"text","text":" "},{"type":"text","text":"ignore parts of the tuple with an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"when you decompose the tuple:"}]},{"type":"codeListing","syntax":"swift","code":["let (justTheStatusCode, _) = http404Error","print(\"The status code is \\(justTheStatusCode)\")","\/\/ Prints \"The status code is 404\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively,"},{"type":"text","text":" "},{"type":"text","text":"access the individual element values in a tuple using index numbers starting at zero:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The status code is \\(http404Error.0)\")","\/\/ Prints \"The status code is 404\"","print(\"The status message is \\(http404Error.1)\")","\/\/ Prints \"The status message is Not Found\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can name the individual elements in a tuple when the tuple is defined:"}]},{"type":"codeListing","syntax":"swift","code":["let http200Status = (statusCode: 200, description: \"OK\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you name the elements in a tuple,"},{"type":"text","text":" "},{"type":"text","text":"you can use the element names to access the values of those elements:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The status code is \\(http200Status.statusCode)\")","\/\/ Prints \"The status code is 200\"","print(\"The status message is \\(http200Status.description)\")","\/\/ Prints \"The status message is OK\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuples are particularly useful as the return values of functions."},{"type":"text","text":" "},{"type":"text","text":"A function that tries to retrieve a web page might return the "},{"type":"codeVoice","code":"(Int, String)"},{"type":"text","text":" tuple type"},{"type":"text","text":" "},{"type":"text","text":"to describe the success or failure of the page retrieval."},{"type":"text","text":" "},{"type":"text","text":"By returning a tuple with two distinct values,"},{"type":"text","text":" "},{"type":"text","text":"each of a different type,"},{"type":"text","text":" "},{"type":"text","text":"the function provides more useful information about its outcome"},{"type":"text","text":" "},{"type":"text","text":"than if it could only return a single value of a single type."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuples are useful for simple groups of related values."},{"type":"text","text":" "},{"type":"text","text":"They’re not suited to the creation of complex data structures."},{"type":"text","text":" "},{"type":"text","text":"If your data structure is likely to be more complex,"},{"type":"text","text":" "},{"type":"text","text":"model it as a class or structure, rather than as a tuple."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Optionals","level":2,"type":"heading","text":"Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optionals"}]},{"type":"text","text":" in situations where a value may be absent."},{"type":"text","text":" "},{"type":"text","text":"An optional represents two possibilities:"},{"type":"text","text":" "},{"type":"text","text":"Either there "},{"type":"emphasis","inlineContent":[{"type":"text","text":"is"}]},{"type":"text","text":" a value, and you can unwrap the optional to access that value,"},{"type":"text","text":" "},{"type":"text","text":"or there "},{"type":"emphasis","inlineContent":[{"type":"text","text":"isn’t"}]},{"type":"text","text":" a value at all."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The concept of optionals doesn’t exist in C or Objective-C."},{"type":"text","text":" "},{"type":"text","text":"The nearest thing in Objective-C is"},{"type":"text","text":" "},{"type":"text","text":"the ability to return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" from a method that would otherwise return an object,"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" meaning “the absence of a valid object.”"},{"type":"text","text":" "},{"type":"text","text":"However, this only works for objects — it doesn’t work for"},{"type":"text","text":" "},{"type":"text","text":"structures, basic C types, or enumeration values."},{"type":"text","text":" "},{"type":"text","text":"For these types,"},{"type":"text","text":" "},{"type":"text","text":"Objective-C methods typically return a special value (such as "},{"type":"codeVoice","code":"NSNotFound"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to indicate the absence of a value."},{"type":"text","text":" "},{"type":"text","text":"This approach assumes that the method’s caller knows there’s a special value to test against"},{"type":"text","text":" "},{"type":"text","text":"and remembers to check for it."},{"type":"text","text":" "},{"type":"text","text":"Swift’s optionals let you indicate the absence of a value for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any type at all"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"without the need for special constants."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of how optionals can be used to cope with the absence of a value."},{"type":"text","text":" "},{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type has an initializer"},{"type":"text","text":" "},{"type":"text","text":"which tries to convert a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"However, not every string can be converted into an integer."},{"type":"text","text":" "},{"type":"text","text":"The string "},{"type":"codeVoice","code":"\"123\""},{"type":"text","text":" can be converted into the numeric value "},{"type":"codeVoice","code":"123"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"but the string "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" doesn’t have an obvious numeric value to convert to."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below uses the initializer to try to convert a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" into an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let possibleNumber = \"123\"","let convertedNumber = Int(possibleNumber)","\/\/ convertedNumber is inferred to be of type \"Int?\", or \"optional Int\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the initializer might fail,"},{"type":"text","text":" "},{"type":"text","text":"it returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", rather than an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"An optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is written as "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":", not "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The question mark indicates that the value it contains is optional,"},{"type":"text","text":" "},{"type":"text","text":"meaning that it might contain "},{"type":"emphasis","inlineContent":[{"type":"text","text":"some"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"or it might contain "},{"type":"emphasis","inlineContent":[{"type":"text","text":"no value at all"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"(It can’t contain anything else, such as a "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" value or a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"It’s either an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", or it’s nothing at all.)"}]},{"anchor":"nil","level":3,"type":"heading","text":"nil"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You set an optional variable to a valueless state"},{"type":"text","text":" "},{"type":"text","text":"by assigning it the special value "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var serverResponseCode: Int? = 404","\/\/ serverResponseCode contains an actual Int value of 404","serverResponseCode = nil","\/\/ serverResponseCode now contains no value"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t use "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" with non-optional constants and variables."},{"type":"text","text":" "},{"type":"text","text":"If a constant or variable in your code needs to work with"},{"type":"text","text":" "},{"type":"text","text":"the absence of a value under certain conditions,"},{"type":"text","text":" "},{"type":"text","text":"always declare it as an optional value of the appropriate type."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define an optional variable without providing a default value,"},{"type":"text","text":" "},{"type":"text","text":"the variable is automatically set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for you:"}]},{"type":"codeListing","syntax":"swift","code":["var surveyAnswer: String?","\/\/ surveyAnswer is automatically set to nil"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" isn’t the same as "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"In Objective-C, "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is a pointer to a nonexistent object."},{"type":"text","text":" "},{"type":"text","text":"In Swift, "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" isn’t a pointer — it’s the absence of a value of a certain type."},{"type":"text","text":" "},{"type":"text","text":"Optionals of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type can be set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", not just object types."}]}],"type":"aside","name":"Note"},{"anchor":"If-Statements-and-Forced-Unwrapping","level":3,"type":"heading","text":"If Statements and Forced Unwrapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement to find out whether an optional contains a value"},{"type":"text","text":" "},{"type":"text","text":"by comparing the optional against "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You perform this comparison with the “equal to” operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"or the “not equal to” operator ("},{"type":"codeVoice","code":"!="},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an optional has a value, it’s considered to be “not equal to” "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if convertedNumber != nil {","   print(\"convertedNumber contains some integer value.\")","}","\/\/ Prints \"convertedNumber contains some integer value.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you’re sure that the optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"does"}]},{"type":"text","text":" contain a value,"},{"type":"text","text":" "},{"type":"text","text":"you can access its underlying value"},{"type":"text","text":" "},{"type":"text","text":"by adding an exclamation point ("},{"type":"codeVoice","code":"!"},{"type":"text","text":") to the end of the optional’s name."},{"type":"text","text":" "},{"type":"text","text":"The exclamation point effectively says,"},{"type":"text","text":" "},{"type":"text","text":"“I know that this optional definitely has a value; please use it.”"},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"forced unwrapping"}]},{"type":"text","text":" of the optional’s value:"}]},{"type":"codeListing","syntax":"swift","code":["if convertedNumber != nil {","   print(\"convertedNumber has an integer value of \\(convertedNumber!).\")","}","\/\/ Prints \"convertedNumber has an integer value of 123.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Trying to use "},{"type":"codeVoice","code":"!"},{"type":"text","text":" to access a nonexistent optional value triggers"},{"type":"text","text":" "},{"type":"text","text":"a runtime error."},{"type":"text","text":" "},{"type":"text","text":"Always make sure that an optional contains a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"before using "},{"type":"codeVoice","code":"!"},{"type":"text","text":" to force-unwrap its value."}]}],"type":"aside","name":"Note"},{"anchor":"Optional-Binding","level":3,"type":"heading","text":"Optional Binding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional binding"}]},{"type":"text","text":" to find out whether an optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"and if so, to make that value available as a temporary constant or variable."},{"type":"text","text":" "},{"type":"text","text":"Optional binding can be used with "},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to check for a value inside an optional,"},{"type":"text","text":" "},{"type":"text","text":"and to extract that value into a constant or variable,"},{"type":"text","text":" "},{"type":"text","text":"as part of a single action."},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statements are described in more detail in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Write an optional binding for an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement as follows:"}]},{"type":"codeListing","syntax":"markdown","code":["if let <#constantName#> = <#someOptional#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can rewrite the "},{"type":"codeVoice","code":"possibleNumber"},{"type":"text","text":" example from"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to use optional binding rather than forced unwrapping:"}]},{"type":"codeListing","syntax":"swift","code":["if let actualNumber = Int(possibleNumber) {","   print(\"The string \\\"\\(possibleNumber)\\\" has an integer value of \\(actualNumber)\")","} else {","   print(\"The string \\\"\\(possibleNumber)\\\" couldn't be converted to an integer\")","}","\/\/ Prints \"The string \"123\" has an integer value of 123\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“If the optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" returned by "},{"type":"codeVoice","code":"Int(possibleNumber)"},{"type":"text","text":" contains a value,"},{"type":"text","text":" "},{"type":"text","text":"set a new constant called "},{"type":"codeVoice","code":"actualNumber"},{"type":"text","text":" to the value contained in the optional.”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the conversion is successful,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"actualNumber"},{"type":"text","text":" constant becomes available for use within"},{"type":"text","text":" "},{"type":"text","text":"the first branch of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"It has already been initialized with the value contained "},{"type":"emphasis","inlineContent":[{"type":"text","text":"within"}]},{"type":"text","text":" the optional,"},{"type":"text","text":" "},{"type":"text","text":"and so you don’t use the "},{"type":"codeVoice","code":"!"},{"type":"text","text":" suffix to access its value."},{"type":"text","text":" "},{"type":"text","text":"In this example, "},{"type":"codeVoice","code":"actualNumber"},{"type":"text","text":" is simply used to print the result of the conversion."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t need to refer to the original, optional constant or variable"},{"type":"text","text":" "},{"type":"text","text":"after accessing the value it contains,"},{"type":"text","text":" "},{"type":"text","text":"you can use the same name for the new constant or variable:"}]},{"type":"codeListing","syntax":"swift","code":["let myNumber = Int(possibleNumber)","\/\/ Here, myNumber is an optional integer","if let myNumber = myNumber {","    \/\/ Here, myNumber is a non-optional integer","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code starts by checking whether "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" contains a value,"},{"type":"text","text":" "},{"type":"text","text":"just like the code in the previous example."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" has a value,"},{"type":"text","text":" "},{"type":"text","text":"the value of a new constant named "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" is set to that value."},{"type":"text","text":" "},{"type":"text","text":"Inside the body of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" refers to that new non-optional constant."},{"type":"text","text":" "},{"type":"text","text":"Before the beginning of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement and after its end,"},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" refers to the optional integer constant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because this kind of code is so common,"},{"type":"text","text":" "},{"type":"text","text":"you can use a shorter spelling to unwrap an optional value:"},{"type":"text","text":" "},{"type":"text","text":"write just the name of the constant or variable that you’re unwrapping."},{"type":"text","text":" "},{"type":"text","text":"The new, unwrapped constant or variable"},{"type":"text","text":" "},{"type":"text","text":"implicitly uses the same name as the optional value."}]},{"type":"codeListing","syntax":"swift","code":["if let myNumber {","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use both constants and variables with optional binding."},{"type":"text","text":" "},{"type":"text","text":"If you wanted to manipulate the value of "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" "},{"type":"text","text":"within the first branch of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"you could write "},{"type":"codeVoice","code":"if var myNumber"},{"type":"text","text":" instead,"},{"type":"text","text":" "},{"type":"text","text":"and the value contained within the optional"},{"type":"text","text":" "},{"type":"text","text":"would be made available as a variable rather than a constant."},{"type":"text","text":" "},{"type":"text","text":"Changes you make to "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" inside the body of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"apply only to that local variable,"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" to the original, optional constant or variable that you unwrapped."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can include as many optional bindings and Boolean conditions"},{"type":"text","text":" "},{"type":"text","text":"in a single "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement as you need to,"},{"type":"text","text":" "},{"type":"text","text":"separated by commas."},{"type":"text","text":" "},{"type":"text","text":"If any of the values in the optional bindings are "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"or any Boolean condition evaluates to "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the whole "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement’s condition"},{"type":"text","text":" "},{"type":"text","text":"is considered to be "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The following "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements are equivalent:"}]},{"type":"codeListing","syntax":"swift","code":["if let firstNumber = Int(\"4\"), let secondNumber = Int(\"42\"), firstNumber < secondNumber && secondNumber < 100 {","   print(\"\\(firstNumber) < \\(secondNumber) < 100\")","}","\/\/ Prints \"4 < 42 < 100\"","","if let firstNumber = Int(\"4\") {","    if let secondNumber = Int(\"42\") {","        if firstNumber < secondNumber && secondNumber < 100 {","            print(\"\\(firstNumber) < \\(secondNumber) < 100\")","        }","    }","}","\/\/ Prints \"4 < 42 < 100\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables created with optional binding in an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"are available only within the body of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"In contrast, the constants and variables created with a "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"are available in the lines of code that follow the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Implicitly-Unwrapped-Optionals","level":3,"type":"heading","text":"Implicitly Unwrapped Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As described above,"},{"type":"text","text":" "},{"type":"text","text":"optionals indicate that a constant or variable is allowed to have “no value”."},{"type":"text","text":" "},{"type":"text","text":"Optionals can be checked with an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement to see if a value exists,"},{"type":"text","text":" "},{"type":"text","text":"and can be conditionally unwrapped with optional binding"},{"type":"text","text":" "},{"type":"text","text":"to access the optional’s value if it does exist."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it’s clear from a program’s structure that an optional will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"type":"text","text":" have a value,"},{"type":"text","text":" "},{"type":"text","text":"after that value is first set."},{"type":"text","text":" "},{"type":"text","text":"In these cases, it’s useful to remove the need"},{"type":"text","text":" "},{"type":"text","text":"to check and unwrap the optional’s value every time it’s accessed,"},{"type":"text","text":" "},{"type":"text","text":"because it can be safely assumed to have a value all of the time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These kinds of optionals are defined as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"implicitly unwrapped optionals"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You write an implicitly unwrapped optional by placing an exclamation point ("},{"type":"codeVoice","code":"String!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"rather than a question mark ("},{"type":"codeVoice","code":"String?"},{"type":"text","text":") after the type that you want to make optional."},{"type":"text","text":" "},{"type":"text","text":"Rather than placing an exclamation point after the optional’s name when you use it,"},{"type":"text","text":" "},{"type":"text","text":"you place an exclamation point after the optional’s type when you declare it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implicitly unwrapped optionals are useful when"},{"type":"text","text":" "},{"type":"text","text":"an optional’s value is confirmed to exist immediately after the optional is first defined"},{"type":"text","text":" "},{"type":"text","text":"and can definitely be assumed to exist at every point thereafter."},{"type":"text","text":" "},{"type":"text","text":"The primary use of implicitly unwrapped optionals in Swift is during class initialization,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An implicitly unwrapped optional is a normal optional behind the scenes,"},{"type":"text","text":" "},{"type":"text","text":"but can also be used like a non-optional value,"},{"type":"text","text":" "},{"type":"text","text":"without the need to unwrap the optional value each time it’s accessed."},{"type":"text","text":" "},{"type":"text","text":"The following example shows the difference in behavior between"},{"type":"text","text":" "},{"type":"text","text":"an optional string and an implicitly unwrapped optional string"},{"type":"text","text":" "},{"type":"text","text":"when accessing their wrapped value as an explicit "},{"type":"codeVoice","code":"String"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let possibleString: String? = \"An optional string.\"","let forcedString: String = possibleString! \/\/ requires an exclamation point","","let assumedString: String! = \"An implicitly unwrapped optional string.\"","let implicitString: String = assumedString \/\/ no need for an exclamation point"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can think of an implicitly unwrapped optional as"},{"type":"text","text":" "},{"type":"text","text":"giving permission for the optional to be force-unwrapped if needed."},{"type":"text","text":" "},{"type":"text","text":"When you use an implicitly unwrapped optional value,"},{"type":"text","text":" "},{"type":"text","text":"Swift first tries to use it as an ordinary optional value;"},{"type":"text","text":" "},{"type":"text","text":"if it can’t be used as an optional, Swift force-unwraps the value."},{"type":"text","text":" "},{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"type":"text","text":"the optional value "},{"type":"codeVoice","code":"assumedString"},{"type":"text","text":" is force-unwrapped"},{"type":"text","text":" "},{"type":"text","text":"before assigning its value to "},{"type":"codeVoice","code":"implicitString"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"implicitString"},{"type":"text","text":" has an explicit, non-optional type of "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In code below,"},{"type":"text","text":" "},{"type":"codeVoice","code":"optionalString"},{"type":"text","text":" doesn’t have an explicit type"},{"type":"text","text":" "},{"type":"text","text":"so it’s an ordinary optional."}]},{"type":"codeListing","syntax":"swift","code":["let optionalString = assumedString","\/\/ The type of optionalString is \"String?\" and assumedString isn't force-unwrapped."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an implicitly unwrapped optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and you try to access its wrapped value,"},{"type":"text","text":" "},{"type":"text","text":"you’ll trigger a runtime error."},{"type":"text","text":" "},{"type":"text","text":"The result is exactly the same as if you place an exclamation point"},{"type":"text","text":" "},{"type":"text","text":"after a normal optional that doesn’t contain a value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can check whether an implicitly unwrapped optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"the same way you check a normal optional:"}]},{"type":"codeListing","syntax":"swift","code":["if assumedString != nil {","   print(assumedString!)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use an implicitly unwrapped optional with optional binding,"},{"type":"text","text":" "},{"type":"text","text":"to check and unwrap its value in a single statement:"}]},{"type":"codeListing","syntax":"swift","code":["if let definiteString = assumedString {","   print(definiteString)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Don’t use an implicitly unwrapped optional when there’s a possibility of"},{"type":"text","text":" "},{"type":"text","text":"a variable becoming "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at a later point."},{"type":"text","text":" "},{"type":"text","text":"Always use a normal optional type if you need to check for a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"during the lifetime of a variable."}]}],"type":"aside","name":"Note"},{"anchor":"Error-Handling","level":2,"type":"heading","text":"Error Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"error handling"}]},{"type":"text","text":" to respond to error conditions"},{"type":"text","text":" "},{"type":"text","text":"your program may encounter during execution."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In contrast to optionals,"},{"type":"text","text":" "},{"type":"text","text":"which can use the presence or absence of a value"},{"type":"text","text":" "},{"type":"text","text":"to communicate success or failure of a function,"},{"type":"text","text":" "},{"type":"text","text":"error handling allows you to determine the underlying cause of failure,"},{"type":"text","text":" "},{"type":"text","text":"and, if necessary, propagate the error to another part of your program."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a function encounters an error condition, it "},{"type":"emphasis","inlineContent":[{"type":"text","text":"throws"}]},{"type":"text","text":" an error."},{"type":"text","text":" "},{"type":"text","text":"That function’s caller can then "},{"type":"emphasis","inlineContent":[{"type":"text","text":"catch"}]},{"type":"text","text":" the error and respond appropriately."}]},{"type":"codeListing","syntax":"swift","code":["func canThrowAnError() throws {","   \/\/ this function may or may not throw an error","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function indicates that it can throw an error"},{"type":"text","text":" "},{"type":"text","text":"by including the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword in its declaration."},{"type":"text","text":" "},{"type":"text","text":"When you call a function that can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"you prepend the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" keyword to the expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift automatically propagates errors out of their current scope"},{"type":"text","text":" "},{"type":"text","text":"until they’re handled by a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause."}]},{"type":"codeListing","syntax":"swift","code":["do {","   try canThrowAnError()","   \/\/ no error was thrown","} catch {","   \/\/ an error was thrown","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement creates a new containing scope,"},{"type":"text","text":" "},{"type":"text","text":"which allows errors to be propagated to one or more "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of how error handling can be used"},{"type":"text","text":" "},{"type":"text","text":"to respond to different error conditions:"}]},{"type":"codeListing","syntax":"swift","code":["func makeASandwich() throws {","    \/\/ ...","}","","do {","    try makeASandwich()","    eatASandwich()","} catch SandwichError.outOfCleanDishes {","    washDishes()","} catch SandwichError.missingIngredients(let ingredients) {","    buyGroceries(ingredients)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, the "},{"type":"codeVoice","code":"makeASandwich()"},{"type":"text","text":" function will throw an error"},{"type":"text","text":" "},{"type":"text","text":"if no clean dishes are available"},{"type":"text","text":" "},{"type":"text","text":"or if any ingredients are missing."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"makeASandwich()"},{"type":"text","text":" can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"the function call is wrapped in a "},{"type":"codeVoice","code":"try"},{"type":"text","text":" expression."},{"type":"text","text":" "},{"type":"text","text":"By wrapping the function call in a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"any errors that are thrown will be propagated"},{"type":"text","text":" "},{"type":"text","text":"to the provided "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If no error is thrown, the "},{"type":"codeVoice","code":"eatASandwich()"},{"type":"text","text":" function is called."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown and it matches the "},{"type":"codeVoice","code":"SandwichError.outOfCleanDishes"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"then the "},{"type":"codeVoice","code":"washDishes()"},{"type":"text","text":" function will be called."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown and it matches the "},{"type":"codeVoice","code":"SandwichError.missingIngredients"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"then the "},{"type":"codeVoice","code":"buyGroceries(_:)"},{"type":"text","text":" function is called"},{"type":"text","text":" "},{"type":"text","text":"with the associated "},{"type":"codeVoice","code":"[String]"},{"type":"text","text":" value captured by the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" pattern."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing, catching, and propagating errors is covered in greater detail in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},{"type":"text","text":"."}]},{"anchor":"Assertions-and-Preconditions","level":2,"type":"heading","text":"Assertions and Preconditions"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Assertions"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"preconditions"}]},{"type":"text","text":" "},{"type":"text","text":"are checks that happen at runtime."},{"type":"text","text":" "},{"type":"text","text":"You use them to make sure an essential condition is satisfied"},{"type":"text","text":" "},{"type":"text","text":"before executing any further code."},{"type":"text","text":" "},{"type":"text","text":"If the Boolean condition in the assertion or precondition"},{"type":"text","text":" "},{"type":"text","text":"evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"code execution continues as usual."},{"type":"text","text":" "},{"type":"text","text":"If the condition evaluates to "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the current state of the program is invalid;"},{"type":"text","text":" "},{"type":"text","text":"code execution ends, and your app is terminated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use assertions and preconditions"},{"type":"text","text":" "},{"type":"text","text":"to express the assumptions you make"},{"type":"text","text":" "},{"type":"text","text":"and the expectations you have"},{"type":"text","text":" "},{"type":"text","text":"while coding,"},{"type":"text","text":" "},{"type":"text","text":"so you can include them as part of your code."},{"type":"text","text":" "},{"type":"text","text":"Assertions help you find mistakes and incorrect assumptions during development,"},{"type":"text","text":" "},{"type":"text","text":"and preconditions help you detect issues in production."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to verifying your expectations at runtime,"},{"type":"text","text":" "},{"type":"text","text":"assertions and preconditions also become a useful form of documentation"},{"type":"text","text":" "},{"type":"text","text":"within the code."},{"type":"text","text":" "},{"type":"text","text":"Unlike the error conditions discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling"},{"type":"text","text":" above,"},{"type":"text","text":" "},{"type":"text","text":"assertions and preconditions aren’t used"},{"type":"text","text":" "},{"type":"text","text":"for recoverable or expected errors."},{"type":"text","text":" "},{"type":"text","text":"Because a failed assertion or precondition"},{"type":"text","text":" "},{"type":"text","text":"indicates an invalid program state,"},{"type":"text","text":" "},{"type":"text","text":"there’s no way to catch a failed assertion."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using assertions and preconditions"},{"type":"text","text":" "},{"type":"text","text":"isn’t a substitute for designing your code in such a way"},{"type":"text","text":" "},{"type":"text","text":"that invalid conditions are unlikely to arise."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"using them to enforce valid data and state"},{"type":"text","text":" "},{"type":"text","text":"causes your app to terminate more predictably"},{"type":"text","text":" "},{"type":"text","text":"if an invalid state occurs,"},{"type":"text","text":" "},{"type":"text","text":"and helps make the problem easier to debug."},{"type":"text","text":" "},{"type":"text","text":"Stopping execution as soon as an invalid state is detected"},{"type":"text","text":" "},{"type":"text","text":"also helps limit the damage caused by that invalid state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The difference between assertions and preconditions is in when they’re checked:"},{"type":"text","text":" "},{"type":"text","text":"Assertions are checked only in debug builds,"},{"type":"text","text":" "},{"type":"text","text":"but preconditions are checked in both debug and production builds."},{"type":"text","text":" "},{"type":"text","text":"In production builds,"},{"type":"text","text":" "},{"type":"text","text":"the condition inside an assertion isn’t evaluated."},{"type":"text","text":" "},{"type":"text","text":"This means you can use as many assertions as you want"},{"type":"text","text":" "},{"type":"text","text":"during your development process,"},{"type":"text","text":" "},{"type":"text","text":"without impacting performance in production."}]},{"anchor":"Debugging-with-Assertions","level":3,"type":"heading","text":"Debugging with Assertions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an assertion by calling the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"from the Swift standard library."},{"type":"text","text":" "},{"type":"text","text":"You pass this function an expression that evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"type":"text","text":"and a message to display if the result of the condition is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let age = -3","assert(age >= 0, \"A person's age can't be less than zero.\")","\/\/ This assertion fails because -3 isn't >= 0."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, code execution continues if "},{"type":"codeVoice","code":"age >= 0"},{"type":"text","text":" evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"that is, if the value of "},{"type":"codeVoice","code":"age"},{"type":"text","text":" is nonnegative."},{"type":"text","text":" "},{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"age"},{"type":"text","text":" is negative, as in the code above,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"age >= 0"},{"type":"text","text":" evaluates to "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the assertion fails, terminating the application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can omit the assertion message —"},{"type":"text","text":" "},{"type":"text","text":"for example, when it would just repeat the condition as prose."}]},{"type":"codeListing","syntax":"swift","code":["assert(age >= 0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the code already checks the condition,"},{"type":"text","text":" "},{"type":"text","text":"you use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"to indicate that an assertion has failed."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["if age > 10 {","    print(\"You can ride the roller-coaster or the ferris wheel.\")","} else if age >= 0 {","    print(\"You can ride the ferris wheel.\")","} else {","    assertionFailure(\"A person's age can't be less than zero.\")","}"]},{"anchor":"Enforcing-Preconditions","level":3,"type":"heading","text":"Enforcing Preconditions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a precondition whenever a condition has the potential to be false,"},{"type":"text","text":" "},{"type":"text","text":"but must "},{"type":"emphasis","inlineContent":[{"type":"text","text":"definitely"}]},{"type":"text","text":" be true for your code to continue execution."},{"type":"text","text":" "},{"type":"text","text":"For example, use a precondition to check that a subscript isn’t out of bounds,"},{"type":"text","text":" "},{"type":"text","text":"or to check that a function has been passed a valid value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write a precondition by calling the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"You pass this function an expression that evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"type":"text","text":"and a message to display if the result of the condition is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ In the implementation of a subscript...","precondition(index > 0, \"Index must be greater than zero.\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also call the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"to indicate that a failure has occurred —"},{"type":"text","text":" "},{"type":"text","text":"for example, if the default case of a switch was taken,"},{"type":"text","text":" "},{"type":"text","text":"but all valid input data should have been handled"},{"type":"text","text":" "},{"type":"text","text":"by one of the switch’s other cases."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you compile in unchecked mode ("},{"type":"codeVoice","code":"-Ounchecked"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"preconditions aren’t checked."},{"type":"text","text":" "},{"type":"text","text":"The compiler assumes that preconditions are always true,"},{"type":"text","text":" "},{"type":"text","text":"and it optimizes your code accordingly."},{"type":"text","text":" "},{"type":"text","text":"However, the "},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"type":"text","text":" function always halts execution,"},{"type":"text","text":" "},{"type":"text","text":"regardless of optimization settings.You can use the "},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"during prototyping and early development"},{"type":"text","text":" "},{"type":"text","text":"to create stubs for functionality that hasn’t been implemented yet,"},{"type":"text","text":" "},{"type":"text","text":"by writing "},{"type":"codeVoice","code":"fatalError(\"Unimplemented\")"},{"type":"text","text":" as the stub implementation."},{"type":"text","text":" "},{"type":"text","text":"Because fatal errors are never optimized out,"},{"type":"text","text":" "},{"type":"text","text":"unlike assertions or preconditions,"},{"type":"text","text":" "},{"type":"text","text":"you can be sure that execution always halts"},{"type":"text","text":" "},{"type":"text","text":"if it encounters a stub implementation."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/the-swift-programming-language\/thebasics"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift is a programming language for iOS, macOS, watchOS, and tvOS app development."},{"type":"text","text":" "},{"type":"text","text":"If you have experience developing in C or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"many parts of Swift will be familiar to you."}],"kind":"article","metadata":{"roleHeading":"Article","title":"The Basics","role":"article","modules":[{"name":"The Swift Programming Language"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/TSPL"]]},"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"generated":true}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-with-Multiple-Return-Values":{"abstract":[],"title":"Functions with Multiple Return Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","url":"\/documentation\/the-swift-programming-language\/functions#Functions-with-Multiple-Return-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Stored properties store constant and variable values as part of an instance,"},{"type":"text","text":" "},{"type":"text","text":"whereas computed properties calculate (rather than store) a value."},{"type":"text","text":" "},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"role":"article","title":"Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality"},{"type":"text","text":" "},{"type":"text","text":"that can be passed around and used in your code."},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"type":"text","text":" "},{"type":"text","text":"and to lambdas in other programming languages."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"type":"text","text":" "},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later,"},{"type":"text","text":" "},{"type":"text","text":"although only one piece of the program executes at a time."},{"type":"text","text":" "},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"type":"text","text":" "},{"type":"text","text":"while continuing to work on long-running operations"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"type":"text","text":"carries out multiple operations at a time;"},{"type":"text","text":" "},{"type":"text","text":"it suspends operations that are waiting for an external system,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"type":"text","text":" "},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"type":"text","text":" "},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is ready for use."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"the property, method, or subscript call succeeds;"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Multiple queries can be chained together,"},{"type":"text","text":" "},{"type":"text","text":"and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"role":"article","title":"Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"type":"text","text":"that can work with any type, subject to requirements that you define."},{"type":"text","text":" "},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Inheritance","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/TSPL":{"role":"collection","title":"The Swift Programming Language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/TSPL","kind":"symbol","type":"topic","url":"\/documentation\/tspl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Access Control","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":" restricts access to parts of your code"},{"type":"text","text":" "},{"type":"text","text":"from code in other source files and modules."},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"type":"text","text":" "},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties":{"abstract":[],"title":"Unowned References and Implicitly Unwrapped Optional Properties","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","title":"Structures and Classes","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/classesandstructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Type-Safety-and-Type-Inference":{"abstract":[],"title":"Type Safety and Type Inference","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference","url":"\/documentation\/the-swift-programming-language\/thebasics#Type-Safety-and-Type-Inference"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"type":"text","text":"for which you don’t have access to the original source code"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Error-Handling":{"abstract":[],"title":"Error Handling","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling","url":"\/documentation\/the-swift-programming-language\/thebasics#Error-Handling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Early-Exit":{"abstract":[],"title":"Early Exit","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit","url":"\/documentation\/the-swift-programming-language\/controlflow#Early-Exit"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"type":"text","text":" "},{"type":"text","text":"that suit a particular task or piece of functionality."},{"type":"text","text":" "},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to provide an actual implementation of those requirements."},{"type":"text","text":" "},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conform"}]},{"type":"text","text":" to that protocol."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"role":"article","title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"deinitializer"}]},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"type":"text","text":"You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Deinitializers are only available on class types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-Interpolation":{"abstract":[],"title":"String Interpolation","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-Interpolation"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC)"},{"type":"text","text":" "},{"type":"text","text":"to track and manage your app’s memory usage."},{"type":"text","text":" "},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"https://developer.apple.com/documentation/swift/1539616-assertionfailure":{"title":"assertionFailure(_:file:line:)","titleInlineContent":[{"type":"text","text":"assertionFailure(_:file:line:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","url":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure"},"https://developer.apple.com/documentation/swift/1539374-preconditionfailure":{"title":"preconditionFailure(_:file:line:)","titleInlineContent":[{"type":"text","text":"preconditionFailure(_:file:line:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","url":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift provides several advanced operators that perform more complex value manipulation."},{"type":"text","text":" "},{"type":"text","text":"These include all of the bitwise and bit shifting operators you will be familiar with"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","title":"Type Casting","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"type":"text","text":"or to treat that instance as a different"},{"type":"text","text":" "},{"type":"text","text":"superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"https://developer.apple.com/documentation/swift/1541112-assert":{"title":"assert(::file:line:)","titleInlineContent":[{"type":"text","text":"assert("},{"type":"emphasis","inlineContent":[{"type":"text","text":":"}]},{"type":"text","text":":file:line:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","url":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"role":"article","title":"Basic Operators","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"type":"text","text":" "},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"type":"text","text":"For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values,"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals":{"abstract":[],"title":"Optionals","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","url":"\/documentation\/the-swift-programming-language\/thebasics#Optionals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"role":"article","title":"Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"type":"text","text":" "},{"type":"text","text":"Sets are unordered collections of unique values."},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Error Handling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Control Flow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"type":"text","text":" "},{"type":"text","text":"These include "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"guard"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"type":"text","text":" "},{"type":"text","text":"and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" "},{"type":"text","text":"to transfer the flow of execution to another point in your code."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"role":"article","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/nestedtypes"},"https://developer.apple.com/documentation/swift/1540960-precondition":{"title":"precondition(::file:line:)","titleInlineContent":[{"type":"text","text":"precondition("},{"type":"emphasis","inlineContent":[{"type":"text","text":":"}]},{"type":"text","text":":file:line:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","url":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values":{"abstract":[],"title":"Default Parameter Values","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","url":"\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque Types","abstract":[{"type":"text","text":"A function or method with an opaque return type"},{"type":"text","text":" "},{"type":"text","text":"hides its return value’s type information."},{"type":"text","text":" "},{"type":"text","text":"Instead of providing a concrete type as the function’s return type,"},{"type":"text","text":" "},{"type":"text","text":"the return value is described in terms of the protocols it supports."},{"type":"text","text":" "},{"type":"text","text":"Hiding type information"},{"type":"text","text":" "},{"type":"text","text":"is useful at boundaries between"},{"type":"text","text":" "},{"type":"text","text":"a module and code that calls into the module,"},{"type":"text","text":" "},{"type":"text","text":"because the underlying type of the return value can remain private."},{"type":"text","text":" "},{"type":"text","text":"Unlike returning a value whose type is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"opaque types preserve type identity —"},{"type":"text","text":" "},{"type":"text","text":"the compiler has access to the type information,"},{"type":"text","text":" "},{"type":"text","text":"but clients of the module don’t."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"}}}